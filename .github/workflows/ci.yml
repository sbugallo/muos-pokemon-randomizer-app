name: CI

on:
  push:
    branches:
      - "*"

permissions:
  contents: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt -r requirements.dev.txt
          pre-commit install

      - name: Run pre-commit
        run: pre-commit run --all-files
        
  build:
    needs: lint
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ env.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_branch }}

      - name: Get version 
        id: version
        run: |
          CURRENT_VERSION=$(grep 'version = ' src/__version__.py | cut -d'"' -f2)
          BRANCH=${GITHUB_REF#refs/heads/}
          
          echo "Current version: $CURRENT_VERSION"
          echo "Current branch: $BRANCH"

          if [ "$BRANCH" = "develop" ]; then
            echo "Building from develop branch"
            # Get latest rc tag for current version
            LATEST_RC=$(git tag -l "v${CURRENT_VERSION}rc*" | sort -V | tail -n1 || echo "")
            echo "Latest rc tag: $LATEST_RC"

            if [ -z "$LATEST_RC" ]; then
              echo "No rc tag found, starting from 0"
              RC_NUM=0
            else
              RC_NUM=$(echo $LATEST_RC | grep -oE 'rc[0-9]+$' | grep -oE '[0-9]+')
              RC_NUM=$((RC_NUM + 1))
              echo "Incremented rc number: $RC_NUM"
            fi
            NEW_VERSION="${CURRENT_VERSION}rc${RC_NUM}"
          else
            echo "Building from main branch"
            NEW_VERSION="${CURRENT_VERSION}"
          fi
          
          echo "version=v$NEW_VERSION" >> $GITHUB_ENV
          
          # Update version in file
          sed -i "s/version = \".*\"/version = \"$NEW_VERSION\"/" src/__version__.py

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Setup just
        uses: extractions/setup-just@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build muxapp
        run: just muxapp

      - name: Configure Git user
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Tag version
        id: tag_version
        run: |
          VERSION=${{ env.version }}
          echo "Tagging version: $VERSION"
          git tag -a "$VERSION" -m "Release $VERSION"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          git push origin "$VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.version }}
          name: Release ${{ env.version }}
          files: .dist/*.muxapp
          prerelease: ${{ contains(env.version, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_branch }}

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.docs.txt
      
      - name: Configure Git user
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
      
      - name: Deploy documentation
        run: |
          VERSION=${{ needs.build.outputs.version }}
          echo "Using version from build job: $VERSION"

          if [[ $VERSION == *"rc"* ]]; then
            echo "Release candidate detected, setting 'latest' alias"
            ALIAS=latest
          else
            echo "Stable release detected, setting 'stable' alias"
            ALIAS=stable
          fi

          echo "Deploying version $VERSION with alias $ALIAS"
          mike deploy \
            --update-aliases \
            --allow-empty \
            --push \
            $VERSION $ALIAS

          mike set-default --push stable