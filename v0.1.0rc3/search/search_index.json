{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"muOS Pok\u00e9mon Randomizer","text":"<p>A powerful Pok\u00e9mon ROM randomizer for muOS devices that lets you create unique adventures by  randomizing GB, GBA and GBC Pok\u00e9mon games directly on your device.</p>"},{"location":"#features","title":"\ud83c\udf1f Features","text":"<ul> <li>\ud83c\udfae Full game controller support with an intuitive interface</li> <li>\ud83d\udcc2 Easy ROM selection from SD cards</li> <li>\ud83d\udcab Real-time randomization progress display</li> <li>\ud83d\udda5\ufe0f Hardware-accelerated GUI with proper aspect ratio preservation</li> <li>\ud83d\udd12 Original ROM files are preserved - randomized versions are saved as new files</li> </ul>"},{"location":"#installation","title":"\ud83d\ude80 Installation","text":"<ol> <li> <p>Download the latest release:</p> <ul> <li>Visit the Releases   page</li> <li>Download the <code>Pokemon-Randomizer-Installer-*.muxapp</code> file</li> </ul> </li> <li> <p>Install on your muOS device:</p> <ul> <li>Connect your device to your computer or use a card reader</li> <li>Copy the <code>.muxapp</code> file to <code>/mnt/mmc/ARCHIVE/</code> on your device</li> <li>Safely eject your device</li> </ul> </li> <li> <p>Install the application:</p> <ul> <li>On your muOS device, open the Archive Manager</li> <li>Select the <code>.muxapp</code> file you copied</li> <li>Wait for the installation to complete</li> </ul> </li> </ol> <ol> <li> <p>Launch the application:</p> <ul> <li>Go to the Applications menu</li> <li>Select \"Pok\u00e9mon Randomizer\"</li> <li>The app should start up and display the main menu.</li> </ul> </li> </ol>"},{"location":"#usage","title":"\ud83c\udfae Usage","text":"<ol> <li> <p>Place your Pok\u00e9mon ROMs in the ROMS directory of either SD card:</p> <ul> <li><code>/mnt/mmc/ROMS/</code> for SD1</li> <li><code>/mnt/sdcard/ROMS/</code> for SD2</li> </ul> </li> <li> <p>Launch the application through muOS interface</p> </li> <li> <p>Use the gamepad to navigate:</p> <ul> <li>\u2795 D-Pad: Navigate menus</li> <li>\ud83d\udd35 A: Select/Confirm</li> <li>\ud83d\udd34 B: Back</li> <li>\u2699\ufe0f Menu: Exit</li> </ul> </li> <li> <p>Select your ROM and press A to start randomization</p> </li> </ol> <ol> <li>The randomized ROM will be saved in the same directory as the original with a suffix <code>.randomized.&lt;timestamp&gt;.&lt;original extension&gt;</code><ul> <li>Example: <code>mygame.gb.randomized.20250410112345.gb</code></li> </ul> </li> </ol> <ol> <li>You can now play the randomized ROM on your muOS device or any compatible emulator</li> </ol>"},{"location":"#customizing-randomization-settings","title":"\u2699\ufe0f Customizing Randomization Settings","text":"<p>The randomizer uses setting files (<code>.rnqs</code>) to control how games are randomized. These settings are  stored in the application's config directory:</p> <pre><code>/mnt/mmc/MUOS/applications/Pok\u00e9mon Randomizer/configs/\n\u251c\u2500\u2500 gb.rnqs  - Settings for Game Boy games (.gb)\n\u251c\u2500\u2500 gbc.rnqs - Settings for Game Boy Color games (.gbc)\n\u2514\u2500\u2500 gba.rnqs - Settings for Game Boy Advance games (.gba)\n</code></pre> <p>The appropriate settings file is automatically selected based on the ROM file extension: - <code>.gb</code> ROMs \u2192 <code>gb.rnqs</code> - <code>.gbc</code> ROMs \u2192 <code>gbc.rnqs</code> - <code>.gba</code> ROMs \u2192 <code>gba.rnqs</code></p> <p>To customize the randomization:</p> <ol> <li>Create your own settings using the Universal Pokemon Randomizer ZX</li> <li>Export your settings as a <code>.rnqs</code> file</li> <li>Copy your custom settings file to the configs directory, replacing the existing file for the    desired platform</li> <li>Launch the randomizer - your settings will be automatically applied to games of that type</li> </ol> <p>This allows you to have different randomization preferences for different generations of Pok\u00e9mon  games.</p>"},{"location":"#development-prerequisites","title":"\ud83d\udccb Development Prerequisites","text":"<ul> <li><code>conda</code></li> </ul>"},{"location":"#development-setup","title":"\ud83d\udcbb Development Setup","text":"<ol> <li> <p>Clone the repository: <pre><code>$ git clone https://github.com/yourusername/muos_pokemon_randomizer.git\n$ cd muos_pokemon_randomizer\n</code></pre></p> </li> <li> <p>Create and activate the conda environment: <pre><code>$ conda env create -f conda.yml\n$ conda activate muos-pokemon-randomizer\n$ pre-commit install\n</code></pre></p> </li> </ol> <p>This will install all dependecies and development tools like: - <code>just</code> for task management - <code>pre-commit</code> hooks for code quality - <code>black</code> for code formatting - <code>flake8</code> for linting - <code>mypy</code> for type checking - <code>isort</code> for import sorting</p>"},{"location":"#building","title":"\ud83d\udee0\ufe0f Building","text":"<p>To build the application package:</p> <pre><code>$ just clean    # Clean the build directory\n$ just build    # Build the application\n$ just zip      # Create the .muxapp package\n</code></pre> <p>Or simply:</p> <pre><code>$ just muxapp   # Build and package in one command\n</code></pre> <p>The resulting <code>.muxapp</code> file will be located in the <code>.dist/</code> directory.</p>"},{"location":"#technical-details","title":"\ud83d\udd27 Technical Details","text":"<p>The application is built with: - SDL2 for hardware-accelerated graphics and input handling - PIL for image manipulation - Pydantic for data validation and settings management - Threading for responsive UI during randomization - Custom component-based UI system</p>"},{"location":"#license","title":"\ud83d\udcdc License","text":"<p>This project is licensed under the GNU Affero General Public License v3.0 - see the  LICENSE file for details.</p>"},{"location":"#acknowledgments","title":"\ud83d\ude4f Acknowledgments","text":"<ul> <li>This project was inspired by The RomM Project muOS app</li> <li>Font based on ProFont Nerd Font</li> <li>The randomizer user is Universal Pokemon Randomizer ZX v4.6.1</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<ol> <li>Fork the repository</li> <li>Create your feature branch (<code>git checkout -b feature/amazing-feature</code>)</li> <li>Install pre-commit hooks (<code>pre-commit install</code>)</li> <li>Commit your changes (<code>git commit -m 'Add some amazing feature'</code>). Bonus points for using    conventional commits!</li> <li>Push to the branch (<code>git push origin feature/amazing-feature</code>)</li> <li>Open a Pull Request</li> </ol>"},{"location":"license/","title":"License","text":"<pre><code>                GNU AFFERO GENERAL PUBLIC LICENSE\n                   Version 3, 19 November 2007\n</code></pre> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/  Everyone is permitted to copy and distribute verbatim copies  of this license document, but changing it is not allowed.</p> <pre><code>                        Preamble\n</code></pre> <p>The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works.  By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users.</p> <p>When we speak of free software, we are referring to freedom, not price.  Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software.</p> <p>A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate.  Many developers of free software are heartened and encouraged by the resulting cooperation.  However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public.</p> <p>The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community.  It requires the operator of a network server to provide the source code of the modified version running there to the users of that server.  Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version.</p> <p>An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals.  This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p> <pre><code>                   TERMS AND CONDITIONS\n</code></pre> <ol> <li>Definitions.</li> </ol> <p>\"This License\" refers to version 3 of the GNU Affero General Public License.</p> <p>\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\"The Program\" refers to any copyrightable work licensed under this License.  Each licensee is addressed as \"you\".  \"Licensees\" and \"recipients\" may be individuals or organizations.</p> <p>To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy.  The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.</p> <p>A \"covered work\" means either the unmodified Program or a work based on the Program.</p> <p>To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy.  Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies.  Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License.  If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p> <ol> <li>Source Code.</li> </ol> <p>The \"source code\" for a work means the preferred form of the work for making modifications to it.  \"Object code\" means any non-source form of a work.</p> <p>A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form.  A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities.  However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work.  For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p> <ol> <li>Basic Permissions.</li> </ol> <p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met.  This License explicitly affirms your unlimited permission to run the unmodified Program.  The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work.  This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force.  You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright.  Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below.  Sublicensing is not allowed; section 10 makes it unnecessary.</p> <ol> <li>Protecting Users' Legal Rights From Anti-Circumvention Law.</li> </ol> <p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p> <ol> <li>Conveying Verbatim Copies.</li> </ol> <p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p> <ol> <li>Conveying Modified Source Versions.</li> </ol> <p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <pre><code>a) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.\n</code></pre> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit.  Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p> <ol> <li>Conveying Non-Source Forms.</li> </ol> <p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <pre><code>a) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.\n</code></pre> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling.  In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage.  For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product.  A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source.  The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information.  But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed.  Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p> <ol> <li>Additional Terms.</li> </ol> <p>\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law.  If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it.  (Additional permissions may be written to require their own removal in certain cases when you modify the work.)  You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <pre><code>a) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.\n</code></pre> <p>All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10.  If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term.  If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p> <ol> <li>Termination.</li> </ol> <p>You may not propagate or modify a covered work except as expressly provided under this License.  Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License.  If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p> <ol> <li>Acceptance Not Required for Having Copies.</li> </ol> <p>You are not required to accept this License in order to receive or run a copy of the Program.  Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance.  However, nothing other than this License grants you permission to propagate or modify any covered work.  These actions infringe copyright if you do not accept this License.  Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p> <ol> <li>Automatic Licensing of Downstream Recipients.</li> </ol> <p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License.  You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations.  If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License.  For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p> <ol> <li>Patents.</li> </ol> <p>A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based.  The work thus licensed is called the contributor's \"contributor version\".</p> <p>A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version.  For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement).  To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients.  \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License.  You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p> <ol> <li>No Surrender of Others' Freedom.</li> </ol> <p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License.  If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all.  For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p> <ol> <li>Remote Network Interaction; Use with the GNU General Public License.</li> </ol> <p>Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software.  This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph.</p> <p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work.  The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License.</p> <ol> <li>Revised Versions of this License.</li> </ol> <p>The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time.  Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number.  If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation.  If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions.  However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p> <ol> <li>Disclaimer of Warranty.</li> </ol> <p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p> <ol> <li>Limitation of Liability.</li> </ol> <p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p> <ol> <li>Interpretation of Sections 15 and 16.</li> </ol> <p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <pre><code>                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs\n</code></pre> <p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program.  It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source.  For example, if your program is a web application, its interface could display a \"Source\" link that leads users to an archive of the code.  There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements.</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/.</p>"},{"location":"reference/app/","title":"App","text":"<p>Application entry point and main app class for the Pok\u00e9mon ROM randomizer.</p> <p>This module contains the main App class that orchestrates the application's components including input handling, GUI rendering, and event processing. It provides the core game loop and initialization logic for the application.</p>"},{"location":"reference/app/#app.App","title":"<code>App</code>","text":"<p>               Bases: <code>object</code></p> <p>Main application class that handles the game loop and input monitoring.</p> <p>This class serves as the central coordinator for the application, managing: - Input handling through SDL2 - GUI rendering and updates - Application state management - Event processing and navigation</p> <p>The class follows a simple game loop pattern where input is processed, state is updated, and the GUI is rendered in a continuous cycle.</p> Source code in <code>src/app.py</code> <pre><code>class App(object):\n    \"\"\"Main application class that handles the game loop and input monitoring.\n\n    This class serves as the central coordinator for the application, managing:\n    - Input handling through SDL2\n    - GUI rendering and updates\n    - Application state management\n    - Event processing and navigation\n\n    The class follows a simple game loop pattern where input is processed, state is updated, and the\n    GUI is rendered in a continuous cycle.\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"Initialize application components.\n\n        Creates instances of:\n        - Input handler for controller/keyboard events\n        - AppStatus for application state management\n        - GraphicalUserInterface for rendering\n        \"\"\"\n        self.input = Input()\n        self.status = AppStatus()\n        self.gui = GraphicalUserInterface()\n        self.running = False\n\n    def _handle_navigation(self) -&gt; None:\n        \"\"\"Handle navigation events and update application state.\n\n        Processes navigation events through the GUI view and updates the application's running state\n        based on exit menu status.\n        \"\"\"\n        self.gui.view.handle_navigation(self.input, self.status)\n\n        if self.status.exit_menu_status.exit:\n            self.running = False\n\n    def _monitor_input(self) -&gt; None:\n        \"\"\"Monitor SDL2 events in a separate thread.\n\n        Continuously polls for SDL2 events and processes them through the input handler. Also\n        handles application quit events.\n        \"\"\"\n        while self.running:\n            events: list[sdl2.SDL_Event] = sdl2.ext.get_events()\n            for event in events:\n                self.input.check_event(event)\n                if event.type == sdl2.SDL_QUIT:\n                    self.running = False\n\n    def start(self) -&gt; None:\n        \"\"\"Start the application and input monitoring thread.\n\n        Initializes the main application loop and starts a daemon thread to monitor input events.\n        \"\"\"\n        self.running = True\n        threading.Thread(target=self._monitor_input, daemon=True).start()\n\n    def update(self) -&gt; None:\n        \"\"\"Update the application state and render the GUI.\n\n        Performs one iteration of the game loop:\n        1. Renders the current GUI state\n        2. Processes navigation events\n        3. Clears the input state for the next frame\n        \"\"\"\n        self.gui.render(self.status)\n        self._handle_navigation()\n        self.input.clear_pressed()\n\n    def destroy(self) -&gt; None:\n        \"\"\"Clean up resources before shutting down.\n\n        Performs cleanup of:\n        - Input handler resources\n        - GUI resources\n        - SDL2 subsystems\n        \"\"\"\n        self.input.destroy()\n        self.gui.destroy()\n        sdl2.SDL_Quit()\n</code></pre>"},{"location":"reference/app/#app.App.gui","title":"<code>gui = GraphicalUserInterface()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/app/#app.App.input","title":"<code>input = Input()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/app/#app.App.running","title":"<code>running = False</code>  <code>instance-attribute</code>","text":""},{"location":"reference/app/#app.App.status","title":"<code>status = AppStatus()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/app/#app.App.__init__","title":"<code>__init__()</code>","text":"<p>Initialize application components.</p> <p>Creates instances of: - Input handler for controller/keyboard events - AppStatus for application state management - GraphicalUserInterface for rendering</p> Source code in <code>src/app.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize application components.\n\n    Creates instances of:\n    - Input handler for controller/keyboard events\n    - AppStatus for application state management\n    - GraphicalUserInterface for rendering\n    \"\"\"\n    self.input = Input()\n    self.status = AppStatus()\n    self.gui = GraphicalUserInterface()\n    self.running = False\n</code></pre>"},{"location":"reference/app/#app.App.destroy","title":"<code>destroy()</code>","text":"<p>Clean up resources before shutting down.</p> <p>Performs cleanup of: - Input handler resources - GUI resources - SDL2 subsystems</p> Source code in <code>src/app.py</code> <pre><code>def destroy(self) -&gt; None:\n    \"\"\"Clean up resources before shutting down.\n\n    Performs cleanup of:\n    - Input handler resources\n    - GUI resources\n    - SDL2 subsystems\n    \"\"\"\n    self.input.destroy()\n    self.gui.destroy()\n    sdl2.SDL_Quit()\n</code></pre>"},{"location":"reference/app/#app.App.start","title":"<code>start()</code>","text":"<p>Start the application and input monitoring thread.</p> <p>Initializes the main application loop and starts a daemon thread to monitor input events.</p> Source code in <code>src/app.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start the application and input monitoring thread.\n\n    Initializes the main application loop and starts a daemon thread to monitor input events.\n    \"\"\"\n    self.running = True\n    threading.Thread(target=self._monitor_input, daemon=True).start()\n</code></pre>"},{"location":"reference/app/#app.App.update","title":"<code>update()</code>","text":"<p>Update the application state and render the GUI.</p> <p>Performs one iteration of the game loop: 1. Renders the current GUI state 2. Processes navigation events 3. Clears the input state for the next frame</p> Source code in <code>src/app.py</code> <pre><code>def update(self) -&gt; None:\n    \"\"\"Update the application state and render the GUI.\n\n    Performs one iteration of the game loop:\n    1. Renders the current GUI state\n    2. Processes navigation events\n    3. Clears the input state for the next frame\n    \"\"\"\n    self.gui.render(self.status)\n    self._handle_navigation()\n    self.input.clear_pressed()\n</code></pre>"},{"location":"reference/draw_utils/","title":"Draw utils","text":"<p>Drawing utilities for rendering the application UI.</p> <p>This module provides a collection of high-level drawing functions that abstract common UI rendering tasks. It handles text rendering, shapes, and layout calculations while maintaining consistent styling and appearance across the application.</p> <p>The module uses PIL's ImageDraw for rendering and supports: - Text rendering with custom fonts - Rectangle drawing with optional rounded corners - Color management and fills - Basic layout calculations</p>"},{"location":"reference/draw_utils/#draw_utils.draw_clear","title":"<code>draw_clear(canvas)</code>","text":"<p>Clear the canvas by filling it with the background color.</p> <p>Resets the entire canvas to the application's background color, effectively clearing all content.</p> <p>Parameters:</p> Name Type Description Default <code>canvas</code> <code>ImageDraw</code> <p>The PIL drawing canvas to clear</p> required Source code in <code>src/draw_utils.py</code> <pre><code>def draw_clear(canvas: ImageDraw) -&gt; None:\n    \"\"\"Clear the canvas by filling it with the background color.\n\n    Resets the entire canvas to the application's background color, effectively clearing all\n    content.\n\n    Args:\n        canvas (ImageDraw): The PIL drawing canvas to clear\n    \"\"\"\n    height = canvas.im.size[1]\n    width = canvas.im.size[0]\n\n    draw_rectangle(\n        canvas=canvas, start_x=0, start_y=0, end_x=width, end_y=height, fill_color=Colors.BACKGROUND\n    )\n</code></pre>"},{"location":"reference/draw_utils/#draw_utils.draw_rectangle","title":"<code>draw_rectangle(canvas, start_x, start_y, end_x, end_y, fill_color=None, outline_color=None, line_width=1, radius=None)</code>","text":"<p>Draw a rectangle on the canvas.</p> <p>Provides a unified interface for drawing rectangles, supporting both standard and rounded rectangles with customizable appearance.</p> <p>Parameters:</p> Name Type Description Default <code>canvas</code> <code>ImageDraw</code> <p>The PIL drawing canvas</p> required <code>start_x</code> <code>int</code> <p>Left coordinate of the rectangle</p> required <code>start_y</code> <code>int</code> <p>Top coordinate of the rectangle</p> required <code>end_x</code> <code>int</code> <p>Right coordinate of the rectangle</p> required <code>end_y</code> <code>int</code> <p>Bottom coordinate of the rectangle</p> required <code>fill_color</code> <code>str | None</code> <p>Color to fill the rectangle with. Defaults to None</p> <code>None</code> <code>outline_color</code> <code>str | None</code> <p>Color of the rectangle's outline. Defaults to None</p> <code>None</code> <code>line_width</code> <code>int</code> <p>Width of the outline in pixels. Defaults to 1</p> <code>1</code> <code>radius</code> <code>float | None</code> <p>Radius for rounded corners. Defaults to None for sharp corners</p> <code>None</code> Source code in <code>src/draw_utils.py</code> <pre><code>def draw_rectangle(\n    canvas: ImageDraw,\n    start_x: int,\n    start_y: int,\n    end_x: int,\n    end_y: int,\n    fill_color: str | None = None,\n    outline_color: str | None = None,\n    line_width: int = 1,\n    radius: float | None = None,\n) -&gt; None:\n    \"\"\"Draw a rectangle on the canvas.\n\n    Provides a unified interface for drawing rectangles, supporting both standard and rounded\n    rectangles with customizable appearance.\n\n    Args:\n        canvas (ImageDraw): The PIL drawing canvas\n        start_x (int): Left coordinate of the rectangle\n        start_y (int): Top coordinate of the rectangle\n        end_x (int): Right coordinate of the rectangle\n        end_y (int): Bottom coordinate of the rectangle\n        fill_color (str | None): Color to fill the rectangle with. Defaults to None\n        outline_color (str | None): Color of the rectangle's outline. Defaults to None\n        line_width (int): Width of the outline in pixels. Defaults to 1\n        radius (float | None): Radius for rounded corners. Defaults to None for sharp corners\n    \"\"\"\n    position = (start_x, start_y, end_x, end_y)\n\n    if radius is None:\n        canvas.rectangle(position, fill=fill_color, outline=outline_color, width=line_width)\n    else:\n        canvas.rounded_rectangle(\n            position, radius=radius, fill=fill_color, outline=outline_color, width=line_width\n        )\n</code></pre>"},{"location":"reference/draw_utils/#draw_utils.draw_text","title":"<code>draw_text(canvas, start_x, start_y, text, font_size=15, color='#FFFFFF', anchor=None)</code>","text":"<p>Draw text on the canvas using the application's custom font.</p> <p>Renders text with consistent styling using the application's custom font. The text can be positioned precisely with optional anchor points.</p> <p>Parameters:</p> Name Type Description Default <code>canvas</code> <code>ImageDraw</code> <p>The PIL drawing canvas</p> required <code>start_x</code> <code>int</code> <p>X-coordinate for text placement</p> required <code>start_y</code> <code>int</code> <p>Y-coordinate for text placement</p> required <code>text</code> <code>str</code> <p>The text to render</p> required <code>font_size</code> <code>int</code> <p>Size of the font in points. Defaults to 15</p> <code>15</code> <code>color</code> <code>str</code> <p>Color of the text in hex format. Defaults to white</p> <code>'#FFFFFF'</code> <code>anchor</code> <code>str | None</code> <p>PIL text anchor point (e.g., \"lt\", \"mm\"). Defaults to None</p> <code>None</code> Source code in <code>src/draw_utils.py</code> <pre><code>def draw_text(\n    canvas: ImageDraw,\n    start_x: int,\n    start_y: int,\n    text: str,\n    font_size: int = 15,\n    color: str = \"#FFFFFF\",\n    anchor: str | None = None,\n) -&gt; None:\n    \"\"\"Draw text on the canvas using the application's custom font.\n\n    Renders text with consistent styling using the application's custom font. The text can be\n    positioned precisely with optional anchor points.\n\n    Args:\n        canvas (ImageDraw): The PIL drawing canvas\n        start_x (int): X-coordinate for text placement\n        start_y (int): Y-coordinate for text placement\n        text (str): The text to render\n        font_size (int): Size of the font in points. Defaults to 15\n        color (str): Color of the text in hex format. Defaults to white\n        anchor (str | None): PIL text anchor point (e.g., \"lt\", \"mm\"). Defaults to None\n    \"\"\"\n    position = (start_x, start_y)\n    font_path = Path(__file__).resolve().parent / \"fonts\" / \"pokemon-randomizer.ttf\"\n    font = ImageFont.truetype(str(font_path.absolute()), font_size)\n\n    canvas.text(position, text, font=font, fill=color, anchor=anchor)\n</code></pre>"},{"location":"reference/draw_utils/#draw_utils.get_text_width","title":"<code>get_text_width(text, font_size)</code>","text":"<p>Calculate the approximate width of text in pixels.</p> <p>Provides a fast approximation of text width without loading the font. This is useful for layout calculations where exact precision isn't required.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to measure</p> required <code>font_size</code> <code>int</code> <p>The font size to use for measurement</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Approximate width of the text in pixels, based on average character width</p> Source code in <code>src/draw_utils.py</code> <pre><code>def get_text_width(text: str, font_size: int) -&gt; int:\n    \"\"\"Calculate the approximate width of text in pixels.\n\n    Provides a fast approximation of text width without loading the font. This is useful for layout\n    calculations where exact precision isn't required.\n\n    Args:\n        text (str): The text to measure\n        font_size (int): The font size to use for measurement\n\n    Returns:\n        int: Approximate width of the text in pixels, based on average character width\n    \"\"\"\n    return math.ceil(len(text) * (font_size * 0.67))\n</code></pre>"},{"location":"reference/gui/","title":"Gui","text":"<p>GUI management system for the Pok\u00e9mon ROM Randomizer.</p> <p>This module provides the core graphical interface functionality, handling: - Window creation and management via SDL2 - Hardware-accelerated rendering - Aspect ratio preservation during scaling - PIL to SDL2 texture conversion - Screen resolution and scaling management</p> <p>The module acts as a bridge between the application's PIL-based drawing and SDL2's hardware-accelerated display system.</p>"},{"location":"reference/gui/#gui.GraphicalUserInterface","title":"<code>GraphicalUserInterface</code>","text":"<p>               Bases: <code>object</code></p> <p>Main GUI handler for SDL2-based window management and rendering.</p> <p>This class manages the application's main window and rendering pipeline, bridging PIL-based drawing with SDL2's hardware acceleration. It handles: - Window creation and management - Hardware-accelerated rendering - Resolution and scaling - Double-buffered display - PIL to SDL2 texture conversion</p> <p>The class maintains a virtual resolution that is scaled to fit the actual window while preserving aspect ratio.</p> <p>Attributes:</p> Name Type Description <code>screen_height</code> <code>int</code> <p>Virtual screen height for internal rendering</p> <code>screen_width</code> <code>int</code> <p>Virtual screen width for internal rendering</p> <code>view</code> <code>View</code> <p>The main view handler for rendering content</p> Source code in <code>src/gui.py</code> <pre><code>class GraphicalUserInterface(object):\n    \"\"\"Main GUI handler for SDL2-based window management and rendering.\n\n    This class manages the application's main window and rendering pipeline, bridging PIL-based\n    drawing with SDL2's hardware acceleration. It handles:\n    - Window creation and management\n    - Hardware-accelerated rendering\n    - Resolution and scaling\n    - Double-buffered display\n    - PIL to SDL2 texture conversion\n\n    The class maintains a virtual resolution that is scaled to fit the actual window while\n    preserving aspect ratio.\n\n    Attributes:\n        screen_height (int): Virtual screen height for internal rendering\n        screen_width (int): Virtual screen width for internal rendering\n        view (View): The main view handler for rendering content\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"Initialize the GUI instance.\n\n        Creates and configures:\n        - Fullscreen SDL2 window\n        - Hardware-accelerated renderer\n        - PIL image and drawing canvas\n        - View handler\n\n        Raises:\n            RuntimeError: If window or renderer creation fails\n        \"\"\"\n        self.screen_height = 480\n        self.screen_width = 640\n\n        # 1. Create window\n        self._window = sdl2.SDL_CreateWindow(\n            \"Pok\u00e9mon Randomizer\".encode(\"utf-8\"),\n            sdl2.SDL_WINDOWPOS_UNDEFINED,\n            sdl2.SDL_WINDOWPOS_UNDEFINED,\n            0,\n            0,  # Size ignored in fullscreen mode\n            sdl2.SDL_WINDOW_FULLSCREEN_DESKTOP | sdl2.SDL_WINDOW_SHOWN,\n        )\n\n        if not self._window:\n            logger.error(f\"Failed to create window: {sdl2.SDL_GetError()}\")\n            raise RuntimeError(\"Failed to create window\")\n\n        # 2. Create renderer\n        self._renderer = sdl2.SDL_CreateRenderer(self._window, -1, sdl2.SDL_RENDERER_ACCELERATED)\n\n        if not self._renderer:\n            logger.error(f\"Failed to create renderer: {sdl2.SDL_GetError()}\")\n            raise RuntimeError(\"Failed to create renderer\")\n\n        # 3. Create Image and Draw\n        self._reset()\n\n        # 4. Set the view\n        self.view = View()\n\n    def _reset(self) -&gt; None:\n        \"\"\"Reset the drawing canvas to its initial state.\n\n        Creates a new PIL Image and ImageDraw instance for the next frame, clearing the canvas to\n        black.\n        \"\"\"\n        sdl2.SDL_SetRenderDrawColor(self._renderer, 0, 0, 0, 255)\n        sdl2.SDL_RenderClear(self._renderer)\n        self._image = Image.new(\"RGBA\", (self.screen_width, self.screen_height), color=\"black\")\n        self._draw = ImageDraw.Draw(self._image)\n\n    def _to_screen(self) -&gt; None:\n        \"\"\"Render the PIL image to the SDL2 window while preserving aspect ratio.\n\n        This method:\n        1. Converts the PIL image to an SDL2 texture\n        2. Calculates scaling to maintain aspect ratio\n        3. Centers the scaled image in the window\n        4. Renders the final result to screen\n\n        The process maintains the original 4:3 aspect ratio regardless of window size while using\n        hardware acceleration for scaling.\n        \"\"\"\n        # Convert PIL image to SDL2 texture at base resolution\n        rgba_data = self._image.tobytes()\n        surface = sdl2.SDL_CreateRGBSurfaceWithFormatFrom(\n            rgba_data,\n            self.screen_width,\n            self.screen_height,\n            32,\n            self.screen_width * 4,\n            sdl2.SDL_PIXELFORMAT_RGBA32,\n        )\n        texture = sdl2.SDL_CreateTextureFromSurface(self._renderer, surface)\n        sdl2.SDL_FreeSurface(surface)\n\n        # Get current window size for scaling\n        raw_window_width = ctypes.c_int()\n        raw_window_height = ctypes.c_int()\n        sdl2.SDL_GetWindowSize(\n            self._window, ctypes.byref(raw_window_width), ctypes.byref(raw_window_height)\n        )\n        window_width = int(raw_window_width.value)\n        window_height = int(raw_window_height.value)\n\n        # Calculate scaling to fit fullscreen while preserving 4:3 aspect ratio\n        scale = min(window_width / self.screen_width, window_height / self.screen_height)\n        dst_width = int(self.screen_width * scale)\n        dst_height = int(self.screen_height * scale)\n        dst_x = (window_width - dst_width) // 2\n        dst_y = (window_height - dst_height) // 2\n        dst_rect = sdl2.SDL_Rect(dst_x, dst_y, dst_width, dst_height)\n\n        # Render the texture to the window\n        sdl2.SDL_RenderCopy(self._renderer, texture, None, dst_rect)\n        sdl2.SDL_RenderPresent(self._renderer)\n        sdl2.SDL_DestroyTexture(texture)\n\n    def render(self, status: AppStatus) -&gt; None:\n        \"\"\"Render the GUI to the screen.\n\n        Updates the PIL image with the current view state and renders it to the SDL2 window while\n        preserving aspect ratio.\n\n        Args:\n            status (AppStatus): The current application status.\n        \"\"\"\n        self._reset()\n        self.view.render(self._draw, status)\n        self._to_screen()\n\n    def destroy(self) -&gt; None:\n        \"\"\"Clean up SDL2 resources before shutting down.\n\n        Performs cleanup of:\n        - SDL2 renderer\n        - SDL2 window\n        - SDL2 video subsystem\n        \"\"\"\n        sdl2.SDL_DestroyRenderer(self._renderer)\n        sdl2.SDL_DestroyWindow(self._window)\n        sdl2.SDL_Quit()\n</code></pre>"},{"location":"reference/gui/#gui.GraphicalUserInterface.screen_height","title":"<code>screen_height = 480</code>  <code>instance-attribute</code>","text":""},{"location":"reference/gui/#gui.GraphicalUserInterface.screen_width","title":"<code>screen_width = 640</code>  <code>instance-attribute</code>","text":""},{"location":"reference/gui/#gui.GraphicalUserInterface.view","title":"<code>view = View()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/gui/#gui.GraphicalUserInterface.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the GUI instance.</p> <p>Creates and configures: - Fullscreen SDL2 window - Hardware-accelerated renderer - PIL image and drawing canvas - View handler</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If window or renderer creation fails</p> Source code in <code>src/gui.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the GUI instance.\n\n    Creates and configures:\n    - Fullscreen SDL2 window\n    - Hardware-accelerated renderer\n    - PIL image and drawing canvas\n    - View handler\n\n    Raises:\n        RuntimeError: If window or renderer creation fails\n    \"\"\"\n    self.screen_height = 480\n    self.screen_width = 640\n\n    # 1. Create window\n    self._window = sdl2.SDL_CreateWindow(\n        \"Pok\u00e9mon Randomizer\".encode(\"utf-8\"),\n        sdl2.SDL_WINDOWPOS_UNDEFINED,\n        sdl2.SDL_WINDOWPOS_UNDEFINED,\n        0,\n        0,  # Size ignored in fullscreen mode\n        sdl2.SDL_WINDOW_FULLSCREEN_DESKTOP | sdl2.SDL_WINDOW_SHOWN,\n    )\n\n    if not self._window:\n        logger.error(f\"Failed to create window: {sdl2.SDL_GetError()}\")\n        raise RuntimeError(\"Failed to create window\")\n\n    # 2. Create renderer\n    self._renderer = sdl2.SDL_CreateRenderer(self._window, -1, sdl2.SDL_RENDERER_ACCELERATED)\n\n    if not self._renderer:\n        logger.error(f\"Failed to create renderer: {sdl2.SDL_GetError()}\")\n        raise RuntimeError(\"Failed to create renderer\")\n\n    # 3. Create Image and Draw\n    self._reset()\n\n    # 4. Set the view\n    self.view = View()\n</code></pre>"},{"location":"reference/gui/#gui.GraphicalUserInterface.destroy","title":"<code>destroy()</code>","text":"<p>Clean up SDL2 resources before shutting down.</p> <p>Performs cleanup of: - SDL2 renderer - SDL2 window - SDL2 video subsystem</p> Source code in <code>src/gui.py</code> <pre><code>def destroy(self) -&gt; None:\n    \"\"\"Clean up SDL2 resources before shutting down.\n\n    Performs cleanup of:\n    - SDL2 renderer\n    - SDL2 window\n    - SDL2 video subsystem\n    \"\"\"\n    sdl2.SDL_DestroyRenderer(self._renderer)\n    sdl2.SDL_DestroyWindow(self._window)\n    sdl2.SDL_Quit()\n</code></pre>"},{"location":"reference/gui/#gui.GraphicalUserInterface.render","title":"<code>render(status)</code>","text":"<p>Render the GUI to the screen.</p> <p>Updates the PIL image with the current view state and renders it to the SDL2 window while preserving aspect ratio.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>AppStatus</code> <p>The current application status.</p> required Source code in <code>src/gui.py</code> <pre><code>def render(self, status: AppStatus) -&gt; None:\n    \"\"\"Render the GUI to the screen.\n\n    Updates the PIL image with the current view state and renders it to the SDL2 window while\n    preserving aspect ratio.\n\n    Args:\n        status (AppStatus): The current application status.\n    \"\"\"\n    self._reset()\n    self.view.render(self._draw, status)\n    self._to_screen()\n</code></pre>"},{"location":"reference/gui_components/","title":"Gui components","text":"<p>GUI components for building the application's user interface.</p> <p>This module implements a component-based UI system with specialized components for: - Base component abstractions - Header and footer bars - ROM selection interface - ROM randomization interface - Exit confirmation dialog</p> <p>Each component handles its own: - Rendering logic - Input processing - Layout management - State updates</p> <p>The components follow a consistent interface defined by BaseComponent and BaseContent classes, allowing for uniform integration into the view system.</p>"},{"location":"reference/gui_components/#gui_components.BaseComponent","title":"<code>BaseComponent</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for GUI components.</p> <p>Defines the fundamental interface that all UI components must implement. This abstract base class ensures consistent behavior across components by enforcing a standard rendering interface.</p> <p>Components are responsible for: - Rendering themselves within given bounds - Maintaining their internal state - Processing relevant application status</p> Source code in <code>src/gui_components.py</code> <pre><code>class BaseComponent(ABC):\n    \"\"\"Base class for GUI components.\n\n    Defines the fundamental interface that all UI components must implement. This abstract base\n    class ensures consistent behavior across components by enforcing a standard rendering interface.\n\n    Components are responsible for:\n    - Rendering themselves within given bounds\n    - Maintaining their internal state\n    - Processing relevant application status\n    \"\"\"\n\n    @abstractmethod\n    def render(\n        self,\n        status: AppStatus,\n        canvas: ImageDraw,\n        start_x: int,\n        start_y: int,\n        end_x: int,\n        end_y: int,\n    ) -&gt; None:\n        \"\"\"Render the content of the component.\n\n        Args:\n            status (AppStatus): Current application status for state-dependent rendering\n            canvas (ImageDraw): The PIL drawing canvas\n            start_x (int): Left boundary of component's drawing area\n            start_y (int): Top boundary of component's drawing area\n            end_x (int): Right boundary of component's drawing area\n            end_y (int): Bottom boundary of component's drawing area\n        \"\"\"\n        pass\n</code></pre>"},{"location":"reference/gui_components/#gui_components.BaseComponent.render","title":"<code>render(status, canvas, start_x, start_y, end_x, end_y)</code>  <code>abstractmethod</code>","text":"<p>Render the content of the component.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>AppStatus</code> <p>Current application status for state-dependent rendering</p> required <code>canvas</code> <code>ImageDraw</code> <p>The PIL drawing canvas</p> required <code>start_x</code> <code>int</code> <p>Left boundary of component's drawing area</p> required <code>start_y</code> <code>int</code> <p>Top boundary of component's drawing area</p> required <code>end_x</code> <code>int</code> <p>Right boundary of component's drawing area</p> required <code>end_y</code> <code>int</code> <p>Bottom boundary of component's drawing area</p> required Source code in <code>src/gui_components.py</code> <pre><code>@abstractmethod\ndef render(\n    self,\n    status: AppStatus,\n    canvas: ImageDraw,\n    start_x: int,\n    start_y: int,\n    end_x: int,\n    end_y: int,\n) -&gt; None:\n    \"\"\"Render the content of the component.\n\n    Args:\n        status (AppStatus): Current application status for state-dependent rendering\n        canvas (ImageDraw): The PIL drawing canvas\n        start_x (int): Left boundary of component's drawing area\n        start_y (int): Top boundary of component's drawing area\n        end_x (int): Right boundary of component's drawing area\n        end_y (int): Bottom boundary of component's drawing area\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/gui_components/#gui_components.BaseContent","title":"<code>BaseContent</code>","text":"<p>               Bases: <code>BaseComponent</code></p> <p>Base class for main content components.</p> <p>Extends BaseComponent with input handling and button configuration capabilities required for interactive content areas. Content components represent full screens or major UI sections that can receive user input.</p> <p>In addition to rendering, content components must: - Define their button mappings - Handle navigation events - Maintain their state</p> Source code in <code>src/gui_components.py</code> <pre><code>class BaseContent(BaseComponent):\n    \"\"\"Base class for main content components.\n\n    Extends BaseComponent with input handling and button configuration capabilities required for\n    interactive content areas. Content components represent full screens or major UI sections that\n    can receive user input.\n\n    In addition to rendering, content components must:\n    - Define their button mappings\n    - Handle navigation events\n    - Maintain their state\n    \"\"\"\n\n    @staticmethod\n    @abstractmethod\n    def get_buttons_config() -&gt; dict[ControllerButton, ButtonConfig]:\n        \"\"\"Get button configuration for this content.\n\n        Defines the mapping of controller buttons to their functions for this content component.\n        This configuration is used to render the button guide in the footer.\n\n        Returns:\n            dict[ControllerButton, ButtonConfig]: Mapping of buttons to their configurations\n        \"\"\"\n        pass\n\n    @abstractmethod\n    def handle_navigation(self, input: Input, status: AppStatus) -&gt; None:\n        \"\"\"Handle navigation input events.\n\n        Process controller input to update component and application state. This method is called\n        when the component is active and receiving input.\n\n        Args:\n            input (Input): Input handler for checking button states\n            status (AppStatus): Current application status to update\n        \"\"\"\n        pass\n</code></pre>"},{"location":"reference/gui_components/#gui_components.BaseContent.get_buttons_config","title":"<code>get_buttons_config()</code>  <code>abstractmethod</code> <code>staticmethod</code>","text":"<p>Get button configuration for this content.</p> <p>Defines the mapping of controller buttons to their functions for this content component. This configuration is used to render the button guide in the footer.</p> <p>Returns:</p> Type Description <code>dict[ControllerButton, ButtonConfig]</code> <p>dict[ControllerButton, ButtonConfig]: Mapping of buttons to their configurations</p> Source code in <code>src/gui_components.py</code> <pre><code>@staticmethod\n@abstractmethod\ndef get_buttons_config() -&gt; dict[ControllerButton, ButtonConfig]:\n    \"\"\"Get button configuration for this content.\n\n    Defines the mapping of controller buttons to their functions for this content component.\n    This configuration is used to render the button guide in the footer.\n\n    Returns:\n        dict[ControllerButton, ButtonConfig]: Mapping of buttons to their configurations\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/gui_components/#gui_components.BaseContent.handle_navigation","title":"<code>handle_navigation(input, status)</code>  <code>abstractmethod</code>","text":"<p>Handle navigation input events.</p> <p>Process controller input to update component and application state. This method is called when the component is active and receiving input.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>Input</code> <p>Input handler for checking button states</p> required <code>status</code> <code>AppStatus</code> <p>Current application status to update</p> required Source code in <code>src/gui_components.py</code> <pre><code>@abstractmethod\ndef handle_navigation(self, input: Input, status: AppStatus) -&gt; None:\n    \"\"\"Handle navigation input events.\n\n    Process controller input to update component and application state. This method is called\n    when the component is active and receiving input.\n\n    Args:\n        input (Input): Input handler for checking button states\n        status (AppStatus): Current application status to update\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/gui_components/#gui_components.ExitMenu","title":"<code>ExitMenu</code>","text":"<p>               Bases: <code>BaseContent</code></p> <p>Exit confirmation dialog component.</p> Source code in <code>src/gui_components.py</code> <pre><code>class ExitMenu(BaseContent):\n    \"\"\"Exit confirmation dialog component.\"\"\"\n\n    def __init__(\n        self,\n        height: int = 160,\n        padding: int = 10,\n        gap: int = 3,\n        title_font_size: int = 25,\n        button_font_size: int = 20,\n    ) -&gt; None:\n        \"\"\"Initialize exit menu.\n\n        Args:\n            height (int): Height of the dialog. Defaults to 160.\n            padding (int): Padding around elements. Defaults to 10.\n            gap (int): Gap between buttons. Defaults to 3.\n            title_font_size (int): Font size for title. Defaults to 25.\n            button_font_size (int): Font size for buttons. Defaults to 20.\n        \"\"\"\n        self.height = height\n        self.padding = padding\n        self.gap = gap\n        self.title_font_size = title_font_size\n        self.button_font_size = button_font_size\n\n    def _draw_modal(\n        self,\n        status: AppStatus,\n        canvas: ImageDraw,\n        start_x: int,\n        start_y: int,\n        end_x: int,\n        end_y: int,\n        title_text: str,\n    ) -&gt; None:\n        \"\"\"Draw the modal dialog box.\n\n        Args:\n            status (AppStatus): Current application status.\n            canvas (ImageDraw): Canvas to draw on.\n            start_x (int): Left position.\n            start_y (int): Top position.\n            end_x (int): Right position.\n            end_y (int): Bottom position.\n            title_text (str): Title text to display.\n        \"\"\"\n        draw_utils.draw_rectangle(\n            canvas=canvas,\n            start_x=start_x,\n            start_y=start_y,\n            end_x=end_x,\n            end_y=end_y,\n            fill_color=Colors.BACKGROUND,\n            outline_color=Colors.ALERT,\n            line_width=2,\n        )\n\n        title_start_x = start_x + self.padding\n        title_start_y = start_y + 2 + self.padding\n\n        draw_utils.draw_text(\n            canvas=canvas,\n            start_x=title_start_x,\n            start_y=title_start_y,\n            text=title_text,\n            font_size=self.title_font_size,\n            color=Colors.PRIMARY,\n        )\n\n        buttons_container_start_x = start_x + self.padding * 3\n        buttons_container_start_y = title_start_y + self.title_font_size + self.padding\n        buttons_container_end_x = end_x - self.padding * 3\n        buttons_container_end_y = end_y - 2 - self.padding\n\n        buttons_container_center_y = (\n            buttons_container_start_y + (buttons_container_end_y - buttons_container_start_y) // 2\n        )\n\n        button_height = self.button_font_size + self.padding * 2\n\n        buttons_height = button_height * 2 + self.gap\n\n        buttons_start_x = buttons_container_start_x\n        buttons_start_y = buttons_container_center_y - buttons_height // 2\n        buttons_end_x = buttons_container_end_x\n\n        option_1_start_x = buttons_start_x\n        option_1_start_y = buttons_start_y\n        option_1_end_x = buttons_end_x\n        option_1_end_y = option_1_start_y + button_height\n        option_1_center_x = buttons_start_x + (buttons_end_x - buttons_start_x) // 2\n        option_1_center_y = option_1_start_y + button_height // 2\n\n        draw_utils.draw_rectangle(\n            canvas=canvas,\n            start_x=option_1_start_x,\n            start_y=option_1_start_y,\n            end_x=option_1_end_x,\n            end_y=option_1_end_y,\n            fill_color=Colors.ALERT if status.exit_menu_status.selected_item == 0 else None,\n            outline_color=Colors.ALERT,\n            line_width=1,\n        )\n\n        option_1_text = f\"{Glyphs.CHECK} YES\"\n        option_1_text_width = draw_utils.get_text_width(option_1_text, self.button_font_size)\n        option_1_text_start_x = option_1_center_x - option_1_text_width // 2\n        option_1_text_start_y = option_1_center_y - self.button_font_size // 2\n\n        draw_utils.draw_text(\n            canvas=canvas,\n            start_x=option_1_text_start_x,\n            start_y=option_1_text_start_y,\n            text=option_1_text,\n            font_size=self.button_font_size,\n            color=Colors.PRIMARY if status.exit_menu_status.selected_item == 0 else Colors.ALERT,\n        )\n\n        option_2_start_x = buttons_start_x\n        option_2_start_y = option_1_end_y + self.gap\n        option_2_end_x = buttons_end_x\n        option_2_end_y = option_2_start_y + button_height\n        option_2_center_x = buttons_start_x + (buttons_end_x - buttons_start_x) // 2\n        option_2_center_y = option_2_start_y + button_height // 2\n\n        draw_utils.draw_rectangle(\n            canvas=canvas,\n            start_x=option_2_start_x,\n            start_y=option_2_start_y,\n            end_x=option_2_end_x,\n            end_y=option_2_end_y,\n            fill_color=Colors.ALERT if status.exit_menu_status.selected_item == 1 else None,\n            outline_color=Colors.ALERT,\n            line_width=1,\n        )\n\n        option_2_text = f\"{Glyphs.CLOSE} NO\"\n        option_2_text_width = draw_utils.get_text_width(option_2_text, self.button_font_size)\n        option_2_text_start_x = option_2_center_x - option_2_text_width // 2\n        option_2_text_start_y = option_2_center_y - self.button_font_size // 2\n\n        draw_utils.draw_text(\n            canvas=canvas,\n            start_x=option_2_text_start_x,\n            start_y=option_2_text_start_y,\n            text=option_2_text,\n            font_size=self.button_font_size,\n            color=Colors.PRIMARY if status.exit_menu_status.selected_item == 1 else Colors.ALERT,\n        )\n\n    @staticmethod\n    def get_buttons_config() -&gt; dict[ControllerButton, ButtonConfig]:\n        \"\"\"Get button configuration for exit menu.\n\n        Returns:\n            dict[ControllerButton, ButtonConfig]: Button configuration mapping.\n        \"\"\"\n        return {\n            ControllerButton.DPAD_UP: ButtonConfig(\n                glyph=Glyphs.GAME_PAD_UP,\n                label=\"Up\",\n            ),\n            ControllerButton.DPAD_DOWN: ButtonConfig(\n                glyph=Glyphs.GAME_PAD_DOWN,\n                label=\"Down\",\n            ),\n            ControllerButton.A: ButtonConfig(\n                glyph=Glyphs.GAME_PAD_A,\n                label=\"Select\",\n            ),\n        }\n\n    def handle_navigation(self, input: Input, status: AppStatus) -&gt; None:\n        \"\"\"Handle navigation events.\n\n        Process directional pad and button inputs to navigate the exit confirmation dialog.\n\n        Args:\n            input (Input): Input handler instance to check button presses\n            status (AppStatus): Current application status for exit menu state\n        \"\"\"\n        if input.key(ControllerButton.DPAD_UP):\n            status.exit_menu_status.selected_item -= 1\n            status.exit_menu_status.selected_item %= 2\n\n        elif input.key(ControllerButton.DPAD_DOWN):\n            status.exit_menu_status.selected_item += 1\n            status.exit_menu_status.selected_item %= 2\n\n        elif input.key(ControllerButton.A):\n            if status.exit_menu_status.selected_item == 0:\n                status.exit_menu_status.exit = True\n            else:\n                status.exit_menu_status.show = False\n\n            status.exit_menu_status.selected_item = 1\n\n    def render(\n        self,\n        status: AppStatus,\n        canvas: ImageDraw,\n        start_x: int,\n        start_y: int,\n        end_x: int,\n        end_y: int,\n    ) -&gt; None:\n        \"\"\"Render the exit confirmation dialog.\n\n        Draws the modal dialog box with title and buttons for user confirmation.\n\n        Args:\n            status (AppStatus): Current application status.\n            canvas (ImageDraw): The canvas to draw on.\n            start_x (int): Left coordinate.\n            start_y (int): Top coordinate.\n            end_x (int): Right coordinate.\n            end_y (int): Bottom coordinate.\n        \"\"\"\n        container_width = end_x - start_x\n        container_height = end_y - start_y\n\n        title_text = \"DO YOU WANT TO EXIT?\"\n        title_width = draw_utils.get_text_width(title_text, self.title_font_size)\n\n        modal_width = title_width + self.padding * 2\n\n        modal_start_x = int(start_x + container_width / 2 - modal_width / 2)\n        modal_start_y = int(start_y + container_height / 2 - self.height / 2)\n        modal_end_x = int(modal_start_x + modal_width)\n        modal_end_y = int(modal_start_y + self.height)\n\n        self._draw_modal(\n            status=status,\n            canvas=canvas,\n            start_x=modal_start_x,\n            start_y=modal_start_y,\n            end_x=modal_end_x,\n            end_y=modal_end_y,\n            title_text=title_text,\n        )\n</code></pre>"},{"location":"reference/gui_components/#gui_components.ExitMenu.button_font_size","title":"<code>button_font_size = button_font_size</code>  <code>instance-attribute</code>","text":""},{"location":"reference/gui_components/#gui_components.ExitMenu.gap","title":"<code>gap = gap</code>  <code>instance-attribute</code>","text":""},{"location":"reference/gui_components/#gui_components.ExitMenu.height","title":"<code>height = height</code>  <code>instance-attribute</code>","text":""},{"location":"reference/gui_components/#gui_components.ExitMenu.padding","title":"<code>padding = padding</code>  <code>instance-attribute</code>","text":""},{"location":"reference/gui_components/#gui_components.ExitMenu.title_font_size","title":"<code>title_font_size = title_font_size</code>  <code>instance-attribute</code>","text":""},{"location":"reference/gui_components/#gui_components.ExitMenu.__init__","title":"<code>__init__(height=160, padding=10, gap=3, title_font_size=25, button_font_size=20)</code>","text":"<p>Initialize exit menu.</p> <p>Parameters:</p> Name Type Description Default <code>height</code> <code>int</code> <p>Height of the dialog. Defaults to 160.</p> <code>160</code> <code>padding</code> <code>int</code> <p>Padding around elements. Defaults to 10.</p> <code>10</code> <code>gap</code> <code>int</code> <p>Gap between buttons. Defaults to 3.</p> <code>3</code> <code>title_font_size</code> <code>int</code> <p>Font size for title. Defaults to 25.</p> <code>25</code> <code>button_font_size</code> <code>int</code> <p>Font size for buttons. Defaults to 20.</p> <code>20</code> Source code in <code>src/gui_components.py</code> <pre><code>def __init__(\n    self,\n    height: int = 160,\n    padding: int = 10,\n    gap: int = 3,\n    title_font_size: int = 25,\n    button_font_size: int = 20,\n) -&gt; None:\n    \"\"\"Initialize exit menu.\n\n    Args:\n        height (int): Height of the dialog. Defaults to 160.\n        padding (int): Padding around elements. Defaults to 10.\n        gap (int): Gap between buttons. Defaults to 3.\n        title_font_size (int): Font size for title. Defaults to 25.\n        button_font_size (int): Font size for buttons. Defaults to 20.\n    \"\"\"\n    self.height = height\n    self.padding = padding\n    self.gap = gap\n    self.title_font_size = title_font_size\n    self.button_font_size = button_font_size\n</code></pre>"},{"location":"reference/gui_components/#gui_components.ExitMenu.get_buttons_config","title":"<code>get_buttons_config()</code>  <code>staticmethod</code>","text":"<p>Get button configuration for exit menu.</p> <p>Returns:</p> Type Description <code>dict[ControllerButton, ButtonConfig]</code> <p>dict[ControllerButton, ButtonConfig]: Button configuration mapping.</p> Source code in <code>src/gui_components.py</code> <pre><code>@staticmethod\ndef get_buttons_config() -&gt; dict[ControllerButton, ButtonConfig]:\n    \"\"\"Get button configuration for exit menu.\n\n    Returns:\n        dict[ControllerButton, ButtonConfig]: Button configuration mapping.\n    \"\"\"\n    return {\n        ControllerButton.DPAD_UP: ButtonConfig(\n            glyph=Glyphs.GAME_PAD_UP,\n            label=\"Up\",\n        ),\n        ControllerButton.DPAD_DOWN: ButtonConfig(\n            glyph=Glyphs.GAME_PAD_DOWN,\n            label=\"Down\",\n        ),\n        ControllerButton.A: ButtonConfig(\n            glyph=Glyphs.GAME_PAD_A,\n            label=\"Select\",\n        ),\n    }\n</code></pre>"},{"location":"reference/gui_components/#gui_components.ExitMenu.handle_navigation","title":"<code>handle_navigation(input, status)</code>","text":"<p>Handle navigation events.</p> <p>Process directional pad and button inputs to navigate the exit confirmation dialog.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>Input</code> <p>Input handler instance to check button presses</p> required <code>status</code> <code>AppStatus</code> <p>Current application status for exit menu state</p> required Source code in <code>src/gui_components.py</code> <pre><code>def handle_navigation(self, input: Input, status: AppStatus) -&gt; None:\n    \"\"\"Handle navigation events.\n\n    Process directional pad and button inputs to navigate the exit confirmation dialog.\n\n    Args:\n        input (Input): Input handler instance to check button presses\n        status (AppStatus): Current application status for exit menu state\n    \"\"\"\n    if input.key(ControllerButton.DPAD_UP):\n        status.exit_menu_status.selected_item -= 1\n        status.exit_menu_status.selected_item %= 2\n\n    elif input.key(ControllerButton.DPAD_DOWN):\n        status.exit_menu_status.selected_item += 1\n        status.exit_menu_status.selected_item %= 2\n\n    elif input.key(ControllerButton.A):\n        if status.exit_menu_status.selected_item == 0:\n            status.exit_menu_status.exit = True\n        else:\n            status.exit_menu_status.show = False\n\n        status.exit_menu_status.selected_item = 1\n</code></pre>"},{"location":"reference/gui_components/#gui_components.ExitMenu.render","title":"<code>render(status, canvas, start_x, start_y, end_x, end_y)</code>","text":"<p>Render the exit confirmation dialog.</p> <p>Draws the modal dialog box with title and buttons for user confirmation.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>AppStatus</code> <p>Current application status.</p> required <code>canvas</code> <code>ImageDraw</code> <p>The canvas to draw on.</p> required <code>start_x</code> <code>int</code> <p>Left coordinate.</p> required <code>start_y</code> <code>int</code> <p>Top coordinate.</p> required <code>end_x</code> <code>int</code> <p>Right coordinate.</p> required <code>end_y</code> <code>int</code> <p>Bottom coordinate.</p> required Source code in <code>src/gui_components.py</code> <pre><code>def render(\n    self,\n    status: AppStatus,\n    canvas: ImageDraw,\n    start_x: int,\n    start_y: int,\n    end_x: int,\n    end_y: int,\n) -&gt; None:\n    \"\"\"Render the exit confirmation dialog.\n\n    Draws the modal dialog box with title and buttons for user confirmation.\n\n    Args:\n        status (AppStatus): Current application status.\n        canvas (ImageDraw): The canvas to draw on.\n        start_x (int): Left coordinate.\n        start_y (int): Top coordinate.\n        end_x (int): Right coordinate.\n        end_y (int): Bottom coordinate.\n    \"\"\"\n    container_width = end_x - start_x\n    container_height = end_y - start_y\n\n    title_text = \"DO YOU WANT TO EXIT?\"\n    title_width = draw_utils.get_text_width(title_text, self.title_font_size)\n\n    modal_width = title_width + self.padding * 2\n\n    modal_start_x = int(start_x + container_width / 2 - modal_width / 2)\n    modal_start_y = int(start_y + container_height / 2 - self.height / 2)\n    modal_end_x = int(modal_start_x + modal_width)\n    modal_end_y = int(modal_start_y + self.height)\n\n    self._draw_modal(\n        status=status,\n        canvas=canvas,\n        start_x=modal_start_x,\n        start_y=modal_start_y,\n        end_x=modal_end_x,\n        end_y=modal_end_y,\n        title_text=title_text,\n    )\n</code></pre>"},{"location":"reference/gui_components/#gui_components.Footer","title":"<code>Footer</code>","text":"<p>               Bases: <code>BaseComponent</code></p> <p>Footer component showing available button controls.</p> Source code in <code>src/gui_components.py</code> <pre><code>class Footer(BaseComponent):\n    \"\"\"Footer component showing available button controls.\"\"\"\n\n    def __init__(\n        self,\n        padding: int = 10,\n        font_size: int = 25,\n        separator_height: int = 2,\n        radius: int = 10,\n        label_margin: int = 5,\n        buttons_config: dict[ControllerButton, ButtonConfig] | None = None,\n    ) -&gt; None:\n        \"\"\"Initialize footer component.\n\n        Args:\n            padding (int): Padding around buttons. Defaults to 10.\n            font_size (int): Font size for button labels. Defaults to 25.\n            separator_height (int): Height of separator line. Defaults to 2.\n            radius (int): Border radius of buttons. Defaults to 10.\n            label_margin (int): Margin between button and label. Defaults to 5.\n            buttons_config (dict[ControllerButton, ButtonConfig] | None): Button configuration.\n                Defaults to None.\n        \"\"\"\n        self.padding = padding\n        self.font_size = font_size\n        self.separator_height = separator_height\n        self.radius = radius\n        self.label_margin = label_margin\n        self.buttons_config = buttons_config or {}\n\n        self.buttons_config[ControllerButton.MENUF] = ButtonConfig(\n            glyph=Glyphs.GAME_PAD_MENU,\n            label=\"Exit\",\n        )\n\n    def render(\n        self,\n        status: AppStatus,\n        canvas: ImageDraw,\n        start_x: int,\n        start_y: int,\n        end_x: int,\n        end_y: int,\n    ) -&gt; None:\n        \"\"\"Render the footer component.\n\n        Args:\n            status (AppStatus): Current application status.\n            canvas (ImageDraw): The canvas to draw on.\n            start_x (int): Left coordinate.\n            start_y (int): Top coordinate.\n            end_x (int): Right coordinate.\n            end_y (int): Bottom coordinate.\n        \"\"\"\n        button_start_y = start_y + self.padding + self.separator_height\n        button_start_x = start_x + self.padding\n\n        draw_utils.draw_rectangle(\n            canvas=canvas,\n            start_x=start_x,\n            start_y=start_y,\n            end_x=end_x,\n            end_y=start_y + self.separator_height,\n            fill_color=Colors.PRIMARY,\n        )\n\n        for config in self.buttons_config.values():\n            full_text = f\"{config.glyph} {config.label}\"\n\n            draw_utils.draw_text(\n                canvas=canvas,\n                start_x=button_start_x,\n                start_y=button_start_y,\n                text=full_text,\n                color=Colors.PRIMARY,\n                font_size=self.font_size,\n            )\n\n            button_start_x += draw_utils.get_text_width(full_text, self.font_size) + 20\n</code></pre>"},{"location":"reference/gui_components/#gui_components.Footer.buttons_config","title":"<code>buttons_config = buttons_config or {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/gui_components/#gui_components.Footer.font_size","title":"<code>font_size = font_size</code>  <code>instance-attribute</code>","text":""},{"location":"reference/gui_components/#gui_components.Footer.label_margin","title":"<code>label_margin = label_margin</code>  <code>instance-attribute</code>","text":""},{"location":"reference/gui_components/#gui_components.Footer.padding","title":"<code>padding = padding</code>  <code>instance-attribute</code>","text":""},{"location":"reference/gui_components/#gui_components.Footer.radius","title":"<code>radius = radius</code>  <code>instance-attribute</code>","text":""},{"location":"reference/gui_components/#gui_components.Footer.separator_height","title":"<code>separator_height = separator_height</code>  <code>instance-attribute</code>","text":""},{"location":"reference/gui_components/#gui_components.Footer.__init__","title":"<code>__init__(padding=10, font_size=25, separator_height=2, radius=10, label_margin=5, buttons_config=None)</code>","text":"<p>Initialize footer component.</p> <p>Parameters:</p> Name Type Description Default <code>padding</code> <code>int</code> <p>Padding around buttons. Defaults to 10.</p> <code>10</code> <code>font_size</code> <code>int</code> <p>Font size for button labels. Defaults to 25.</p> <code>25</code> <code>separator_height</code> <code>int</code> <p>Height of separator line. Defaults to 2.</p> <code>2</code> <code>radius</code> <code>int</code> <p>Border radius of buttons. Defaults to 10.</p> <code>10</code> <code>label_margin</code> <code>int</code> <p>Margin between button and label. Defaults to 5.</p> <code>5</code> <code>buttons_config</code> <code>dict[ControllerButton, ButtonConfig] | None</code> <p>Button configuration. Defaults to None.</p> <code>None</code> Source code in <code>src/gui_components.py</code> <pre><code>def __init__(\n    self,\n    padding: int = 10,\n    font_size: int = 25,\n    separator_height: int = 2,\n    radius: int = 10,\n    label_margin: int = 5,\n    buttons_config: dict[ControllerButton, ButtonConfig] | None = None,\n) -&gt; None:\n    \"\"\"Initialize footer component.\n\n    Args:\n        padding (int): Padding around buttons. Defaults to 10.\n        font_size (int): Font size for button labels. Defaults to 25.\n        separator_height (int): Height of separator line. Defaults to 2.\n        radius (int): Border radius of buttons. Defaults to 10.\n        label_margin (int): Margin between button and label. Defaults to 5.\n        buttons_config (dict[ControllerButton, ButtonConfig] | None): Button configuration.\n            Defaults to None.\n    \"\"\"\n    self.padding = padding\n    self.font_size = font_size\n    self.separator_height = separator_height\n    self.radius = radius\n    self.label_margin = label_margin\n    self.buttons_config = buttons_config or {}\n\n    self.buttons_config[ControllerButton.MENUF] = ButtonConfig(\n        glyph=Glyphs.GAME_PAD_MENU,\n        label=\"Exit\",\n    )\n</code></pre>"},{"location":"reference/gui_components/#gui_components.Footer.render","title":"<code>render(status, canvas, start_x, start_y, end_x, end_y)</code>","text":"<p>Render the footer component.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>AppStatus</code> <p>Current application status.</p> required <code>canvas</code> <code>ImageDraw</code> <p>The canvas to draw on.</p> required <code>start_x</code> <code>int</code> <p>Left coordinate.</p> required <code>start_y</code> <code>int</code> <p>Top coordinate.</p> required <code>end_x</code> <code>int</code> <p>Right coordinate.</p> required <code>end_y</code> <code>int</code> <p>Bottom coordinate.</p> required Source code in <code>src/gui_components.py</code> <pre><code>def render(\n    self,\n    status: AppStatus,\n    canvas: ImageDraw,\n    start_x: int,\n    start_y: int,\n    end_x: int,\n    end_y: int,\n) -&gt; None:\n    \"\"\"Render the footer component.\n\n    Args:\n        status (AppStatus): Current application status.\n        canvas (ImageDraw): The canvas to draw on.\n        start_x (int): Left coordinate.\n        start_y (int): Top coordinate.\n        end_x (int): Right coordinate.\n        end_y (int): Bottom coordinate.\n    \"\"\"\n    button_start_y = start_y + self.padding + self.separator_height\n    button_start_x = start_x + self.padding\n\n    draw_utils.draw_rectangle(\n        canvas=canvas,\n        start_x=start_x,\n        start_y=start_y,\n        end_x=end_x,\n        end_y=start_y + self.separator_height,\n        fill_color=Colors.PRIMARY,\n    )\n\n    for config in self.buttons_config.values():\n        full_text = f\"{config.glyph} {config.label}\"\n\n        draw_utils.draw_text(\n            canvas=canvas,\n            start_x=button_start_x,\n            start_y=button_start_y,\n            text=full_text,\n            color=Colors.PRIMARY,\n            font_size=self.font_size,\n        )\n\n        button_start_x += draw_utils.get_text_width(full_text, self.font_size) + 20\n</code></pre>"},{"location":"reference/gui_components/#gui_components.Header","title":"<code>Header</code>","text":"<p>               Bases: <code>BaseComponent</code></p> <p>Header component showing application title and version.</p> Source code in <code>src/gui_components.py</code> <pre><code>class Header(BaseComponent):\n    \"\"\"Header component showing application title and version.\"\"\"\n\n    def __init__(\n        self,\n        padding: int = 20,\n        font_size: int = 25,\n        separator_height: int = 2,\n    ) -&gt; None:\n        \"\"\"Initialize header component.\n\n        Args:\n            padding (int): Padding around text. Defaults to 20.\n            font_size (int): Font size for header text. Defaults to 25.\n            separator_height (int): Height of separator line. Defaults to 2.\n        \"\"\"\n        self.padding = padding\n        self.font_size = font_size\n        self.separator_height = separator_height\n\n    def render(\n        self,\n        status: AppStatus,\n        canvas: ImageDraw,\n        start_x: int,\n        start_y: int,\n        end_x: int,\n        end_y: int,\n    ) -&gt; None:\n        \"\"\"Render the header component.\n\n        Args:\n            status (AppStatus): Current application status.\n            canvas (ImageDraw): The canvas to draw on.\n            start_x (int): Left coordinate.\n            start_y (int): Top coordinate.\n            end_x (int): Right coordinate.\n            end_y (int): Bottom coordinate.\n        \"\"\"\n        height = end_y - start_y\n\n        separator_start_x = start_x\n        separator_start_y = end_y - self.separator_height\n        separator_end_x = end_x\n        separator_end_y = end_y\n\n        text_start_x = start_x + self.padding\n        text_start_y = start_y + int(height / 2 - self.font_size / 2)\n\n        draw_utils.draw_text(\n            canvas=canvas,\n            start_x=text_start_x,\n            start_y=text_start_y,\n            text=f\"{Glyphs.THUNDER_FILLED} Pok\u00e9mon Randomizer v{version}\",\n            font_size=self.font_size,\n            color=Colors.PRIMARY,\n        )\n\n        draw_utils.draw_rectangle(\n            canvas=canvas,\n            start_x=separator_start_x,\n            start_y=separator_start_y,\n            end_x=separator_end_x,\n            end_y=separator_end_y,\n            fill_color=Colors.PRIMARY,\n        )\n</code></pre>"},{"location":"reference/gui_components/#gui_components.Header.font_size","title":"<code>font_size = font_size</code>  <code>instance-attribute</code>","text":""},{"location":"reference/gui_components/#gui_components.Header.padding","title":"<code>padding = padding</code>  <code>instance-attribute</code>","text":""},{"location":"reference/gui_components/#gui_components.Header.separator_height","title":"<code>separator_height = separator_height</code>  <code>instance-attribute</code>","text":""},{"location":"reference/gui_components/#gui_components.Header.__init__","title":"<code>__init__(padding=20, font_size=25, separator_height=2)</code>","text":"<p>Initialize header component.</p> <p>Parameters:</p> Name Type Description Default <code>padding</code> <code>int</code> <p>Padding around text. Defaults to 20.</p> <code>20</code> <code>font_size</code> <code>int</code> <p>Font size for header text. Defaults to 25.</p> <code>25</code> <code>separator_height</code> <code>int</code> <p>Height of separator line. Defaults to 2.</p> <code>2</code> Source code in <code>src/gui_components.py</code> <pre><code>def __init__(\n    self,\n    padding: int = 20,\n    font_size: int = 25,\n    separator_height: int = 2,\n) -&gt; None:\n    \"\"\"Initialize header component.\n\n    Args:\n        padding (int): Padding around text. Defaults to 20.\n        font_size (int): Font size for header text. Defaults to 25.\n        separator_height (int): Height of separator line. Defaults to 2.\n    \"\"\"\n    self.padding = padding\n    self.font_size = font_size\n    self.separator_height = separator_height\n</code></pre>"},{"location":"reference/gui_components/#gui_components.Header.render","title":"<code>render(status, canvas, start_x, start_y, end_x, end_y)</code>","text":"<p>Render the header component.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>AppStatus</code> <p>Current application status.</p> required <code>canvas</code> <code>ImageDraw</code> <p>The canvas to draw on.</p> required <code>start_x</code> <code>int</code> <p>Left coordinate.</p> required <code>start_y</code> <code>int</code> <p>Top coordinate.</p> required <code>end_x</code> <code>int</code> <p>Right coordinate.</p> required <code>end_y</code> <code>int</code> <p>Bottom coordinate.</p> required Source code in <code>src/gui_components.py</code> <pre><code>def render(\n    self,\n    status: AppStatus,\n    canvas: ImageDraw,\n    start_x: int,\n    start_y: int,\n    end_x: int,\n    end_y: int,\n) -&gt; None:\n    \"\"\"Render the header component.\n\n    Args:\n        status (AppStatus): Current application status.\n        canvas (ImageDraw): The canvas to draw on.\n        start_x (int): Left coordinate.\n        start_y (int): Top coordinate.\n        end_x (int): Right coordinate.\n        end_y (int): Bottom coordinate.\n    \"\"\"\n    height = end_y - start_y\n\n    separator_start_x = start_x\n    separator_start_y = end_y - self.separator_height\n    separator_end_x = end_x\n    separator_end_y = end_y\n\n    text_start_x = start_x + self.padding\n    text_start_y = start_y + int(height / 2 - self.font_size / 2)\n\n    draw_utils.draw_text(\n        canvas=canvas,\n        start_x=text_start_x,\n        start_y=text_start_y,\n        text=f\"{Glyphs.THUNDER_FILLED} Pok\u00e9mon Randomizer v{version}\",\n        font_size=self.font_size,\n        color=Colors.PRIMARY,\n    )\n\n    draw_utils.draw_rectangle(\n        canvas=canvas,\n        start_x=separator_start_x,\n        start_y=separator_start_y,\n        end_x=separator_end_x,\n        end_y=separator_end_y,\n        fill_color=Colors.PRIMARY,\n    )\n</code></pre>"},{"location":"reference/gui_components/#gui_components.RandomizeROM","title":"<code>RandomizeROM</code>","text":"<p>               Bases: <code>BaseContent</code></p> <p>Screen component for ROM randomization process.</p> Source code in <code>src/gui_components.py</code> <pre><code>class RandomizeROM(BaseContent):\n    \"\"\"Screen component for ROM randomization process.\"\"\"\n\n    def __init__(self, padding: int = 10, font_size: int = 20, gap: int = 10) -&gt; None:\n        \"\"\"Initialize the ROM randomization screen.\n\n        Args:\n            padding (int): Padding around elements. Defaults to 10.\n            font_size (int): Font size for text. Defaults to 20.\n            gap (int): Gap between log entries. Defaults to 10.\n        \"\"\"\n        self.padding = padding\n        self.font_size = font_size\n        self.gap = gap\n\n        self._is_finished_lock = threading.Lock()\n        self._is_running_lock = threading.Lock()\n        self._logs_lock = threading.Lock()\n\n    @staticmethod\n    def get_buttons_config() -&gt; dict[ControllerButton, ButtonConfig]:\n        \"\"\"Get button configuration for ROM randomization screen.\n\n        Returns:\n            dict[ControllerButton, ButtonConfig]: Button configuration mapping.\n        \"\"\"\n        return {\n            ControllerButton.A: ButtonConfig(\n                glyph=Glyphs.GAME_PAD_A,\n                label=\"Select\",\n            ),\n            ControllerButton.B: ButtonConfig(\n                glyph=Glyphs.GAME_PAD_B,\n                label=\"Back\",\n            ),\n        }\n\n    def _patch_rom(self, status: AppStatus) -&gt; None:\n        \"\"\"Execute the ROM randomization process.\n\n        This method runs in a separate thread and handles the entire ROM randomization process,\n        including file operations and running the randomizer JAR.\n\n        Args:\n            status (AppStatus): Current application status.\n        \"\"\"\n        with TemporaryDirectory() as temp_dir:\n            temp_dir_path = Path(temp_dir)\n\n            orig_rom_path = status.select_rom_status.selected_rom\n\n            if orig_rom_path is None:\n                with self._logs_lock:\n                    message = \"No ROM selected.\"\n                    logger.info(message)\n                    status.randomize_rom_status.logs = message\n\n                with self._is_running_lock:\n                    status.randomize_rom_status.is_running = False\n                return\n\n            if not orig_rom_path.exists():\n                with self._logs_lock:\n                    message = f\"ROM not found: {orig_rom_path}\"\n                    logger.info(message)\n                    status.randomize_rom_status.logs = message\n\n                with self._is_running_lock:\n                    status.randomize_rom_status.is_running = False\n                return\n\n            src_rom_path = temp_dir_path / f\"src{orig_rom_path.suffix}\"\n            copyfile(orig_rom_path, src_rom_path)\n\n            rom_extension = src_rom_path.suffix.lower().strip(\".\")\n            config_path = Path(__file__).parent / \"configs\" / f\"{rom_extension}.rnqs\"\n\n            if not config_path.exists():\n                with self._logs_lock:\n                    message = f\"No configuration found for {rom_extension} files:\\n {config_path}\"\n                    logger.info(message)\n                    status.randomize_rom_status.logs = message\n\n                with self._is_running_lock:\n                    status.randomize_rom_status.is_running = False\n                return\n\n            bin_path = Path(__file__).parent / \"3rd-party\" / \"PokeRandoZX.jar\"\n            if not bin_path.exists():\n                with self._logs_lock:\n                    message = f\"Randomizer binary not found: {bin_path}\"\n                    logger.info(message)\n                    status.randomize_rom_status.logs = message\n\n                with self._is_running_lock:\n                    status.randomize_rom_status.is_running = False\n                return\n\n            now = datetime.now().strftime(\"%Y%m%d%H%M%S\")\n            dst_rom_path = src_rom_path.with_suffix(f\".randomized.{now}.{rom_extension}\")\n            out_rom_path = orig_rom_path.with_suffix(f\".randomized.{now}.{rom_extension}\")\n\n            command = (\n                f\"/opt/java/bin/java -Xmx4608M -jar '{bin_path}' cli \"\n                f\"-i '{src_rom_path}' \"\n                f\"-o '{dst_rom_path}' \"\n                f\"-s '{config_path}'\"\n            )\n\n            with self._logs_lock:\n                message = f\"{Glyphs.EXCLAMATION} Starting randomization\"\n                logger.info(message)\n                status.randomize_rom_status.logs += f\"{message}\\n\"\n\n            try:\n                subprocess.run(\n                    command,\n                    check=True,\n                    env=os.environ.copy(),\n                    shell=True,\n                )\n\n                # There is a strange behaviour with the randomizer. E.g., when randomizer a .gb\n                # file, it creates a .gbc file. So we need to be careful with the extension.\n                files_in_output_dir = [\n                    entry\n                    for entry in temp_dir_path.iterdir()\n                    if entry.is_file() and entry.name != src_rom_path.name\n                ]\n\n                if len(files_in_output_dir) != 1:\n                    message = (\n                        f\"Expected one file in output directory, but found \"\n                        f\"{len(files_in_output_dir)}: {files_in_output_dir}\"\n                    )\n                    logger.error(message)\n                    raise Exception(message)\n\n                dst_rom_path = files_in_output_dir[0]\n                copyfile(dst_rom_path, out_rom_path)\n\n                with self._logs_lock:\n                    message = (\n                        f\"[SUCCESS] Randomization completed {Glyphs.HEART}.\\n\"\n                        f\"Randomized ROM saved to: {out_rom_path}\"\n                    )\n                    logger.info(message)\n                    status.randomize_rom_status.logs += f\"{message}\\n\"\n\n            except Exception as e:\n                with self._logs_lock:\n                    message = f\"[ERROR] Randomization failed: {e}\"\n                    logger.error(message)\n                    status.randomize_rom_status.logs += f\"{message}\\n\"\n\n            with self._is_running_lock, self._is_finished_lock:\n                status.randomize_rom_status.is_running = False\n                status.randomize_rom_status.is_finished = True\n\n    def handle_navigation(self, input: Input, status: AppStatus) -&gt; None:\n        \"\"\"Handle navigation events for ROM randomization screen.\n\n        Handle button inputs from the controller to start/stop randomization process or navigate\n        back to the previous screen.\n\n        Args:\n            input (Input): Input handler instance to check button presses\n            status (AppStatus): Current application status to track randomization state\n        \"\"\"\n        if input.key(ControllerButton.A):\n            with self._is_running_lock, self._is_finished_lock:\n                if status.randomize_rom_status.is_finished:\n                    return\n\n                if not status.randomize_rom_status.is_running:\n                    threading.Thread(\n                        target=self._patch_rom,\n                        args=(status,),\n                        daemon=True,\n                    ).start()\n                    status.randomize_rom_status.is_running = True\n\n        elif input.key(ControllerButton.B):\n            with self._is_running_lock:\n                if not status.randomize_rom_status.is_running:\n                    status.previous_step()\n\n    def render(\n        self,\n        status: AppStatus,\n        canvas: ImageDraw,\n        start_x: int,\n        start_y: int,\n        end_x: int,\n        end_y: int,\n    ) -&gt; None:\n        \"\"\"Render the ROM randomization screen.\n\n        Draws the randomization screen interface including instructions text and log entries.\n\n        Args:\n            status (AppStatus): Current application status containing randomization state\n            canvas (ImageDraw): The PIL ImageDraw canvas to draw on\n            start_x (int): Left coordinate of the drawing area\n            start_y (int): Top coordinate of the drawing area\n            end_x (int): Right coordinate of the drawing area\n            end_y (int): Bottom coordinate of the drawing area\n        \"\"\"\n        container_start_x = start_x + self.padding\n        container_start_y = start_y + self.padding\n\n        draw_utils.draw_text(\n            canvas=canvas,\n            start_x=container_start_x,\n            start_y=container_start_y,\n            text=f\"Press {Glyphs.GAME_PAD_A} to start randomizing the ROM.\",\n            font_size=self.font_size,\n            color=Colors.PRIMARY,\n        )\n\n        with self._logs_lock:\n            logs = status.randomize_rom_status.logs.split(\"\\n\")\n            logs = [log for log in logs if log.strip() != \"\"]\n            logs = logs[-20:]\n\n        entry_start_y = container_start_y + self.font_size + self.gap\n        for log in logs:\n            if log.startswith(\"[ERROR]\"):\n                color = Colors.ERROR\n            elif log.startswith(\"[SUCCESS]\"):\n                color = Colors.SUCCESS\n            else:\n                color = Colors.PRIMARY\n\n            draw_utils.draw_text(\n                canvas=canvas,\n                start_x=container_start_x,\n                start_y=entry_start_y,\n                text=log,\n                font_size=self.font_size,\n                color=color,\n            )\n\n            entry_start_y += self.font_size + self.gap\n</code></pre>"},{"location":"reference/gui_components/#gui_components.RandomizeROM.font_size","title":"<code>font_size = font_size</code>  <code>instance-attribute</code>","text":""},{"location":"reference/gui_components/#gui_components.RandomizeROM.gap","title":"<code>gap = gap</code>  <code>instance-attribute</code>","text":""},{"location":"reference/gui_components/#gui_components.RandomizeROM.padding","title":"<code>padding = padding</code>  <code>instance-attribute</code>","text":""},{"location":"reference/gui_components/#gui_components.RandomizeROM.__init__","title":"<code>__init__(padding=10, font_size=20, gap=10)</code>","text":"<p>Initialize the ROM randomization screen.</p> <p>Parameters:</p> Name Type Description Default <code>padding</code> <code>int</code> <p>Padding around elements. Defaults to 10.</p> <code>10</code> <code>font_size</code> <code>int</code> <p>Font size for text. Defaults to 20.</p> <code>20</code> <code>gap</code> <code>int</code> <p>Gap between log entries. Defaults to 10.</p> <code>10</code> Source code in <code>src/gui_components.py</code> <pre><code>def __init__(self, padding: int = 10, font_size: int = 20, gap: int = 10) -&gt; None:\n    \"\"\"Initialize the ROM randomization screen.\n\n    Args:\n        padding (int): Padding around elements. Defaults to 10.\n        font_size (int): Font size for text. Defaults to 20.\n        gap (int): Gap between log entries. Defaults to 10.\n    \"\"\"\n    self.padding = padding\n    self.font_size = font_size\n    self.gap = gap\n\n    self._is_finished_lock = threading.Lock()\n    self._is_running_lock = threading.Lock()\n    self._logs_lock = threading.Lock()\n</code></pre>"},{"location":"reference/gui_components/#gui_components.RandomizeROM.get_buttons_config","title":"<code>get_buttons_config()</code>  <code>staticmethod</code>","text":"<p>Get button configuration for ROM randomization screen.</p> <p>Returns:</p> Type Description <code>dict[ControllerButton, ButtonConfig]</code> <p>dict[ControllerButton, ButtonConfig]: Button configuration mapping.</p> Source code in <code>src/gui_components.py</code> <pre><code>@staticmethod\ndef get_buttons_config() -&gt; dict[ControllerButton, ButtonConfig]:\n    \"\"\"Get button configuration for ROM randomization screen.\n\n    Returns:\n        dict[ControllerButton, ButtonConfig]: Button configuration mapping.\n    \"\"\"\n    return {\n        ControllerButton.A: ButtonConfig(\n            glyph=Glyphs.GAME_PAD_A,\n            label=\"Select\",\n        ),\n        ControllerButton.B: ButtonConfig(\n            glyph=Glyphs.GAME_PAD_B,\n            label=\"Back\",\n        ),\n    }\n</code></pre>"},{"location":"reference/gui_components/#gui_components.RandomizeROM.handle_navigation","title":"<code>handle_navigation(input, status)</code>","text":"<p>Handle navigation events for ROM randomization screen.</p> <p>Handle button inputs from the controller to start/stop randomization process or navigate back to the previous screen.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>Input</code> <p>Input handler instance to check button presses</p> required <code>status</code> <code>AppStatus</code> <p>Current application status to track randomization state</p> required Source code in <code>src/gui_components.py</code> <pre><code>def handle_navigation(self, input: Input, status: AppStatus) -&gt; None:\n    \"\"\"Handle navigation events for ROM randomization screen.\n\n    Handle button inputs from the controller to start/stop randomization process or navigate\n    back to the previous screen.\n\n    Args:\n        input (Input): Input handler instance to check button presses\n        status (AppStatus): Current application status to track randomization state\n    \"\"\"\n    if input.key(ControllerButton.A):\n        with self._is_running_lock, self._is_finished_lock:\n            if status.randomize_rom_status.is_finished:\n                return\n\n            if not status.randomize_rom_status.is_running:\n                threading.Thread(\n                    target=self._patch_rom,\n                    args=(status,),\n                    daemon=True,\n                ).start()\n                status.randomize_rom_status.is_running = True\n\n    elif input.key(ControllerButton.B):\n        with self._is_running_lock:\n            if not status.randomize_rom_status.is_running:\n                status.previous_step()\n</code></pre>"},{"location":"reference/gui_components/#gui_components.RandomizeROM.render","title":"<code>render(status, canvas, start_x, start_y, end_x, end_y)</code>","text":"<p>Render the ROM randomization screen.</p> <p>Draws the randomization screen interface including instructions text and log entries.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>AppStatus</code> <p>Current application status containing randomization state</p> required <code>canvas</code> <code>ImageDraw</code> <p>The PIL ImageDraw canvas to draw on</p> required <code>start_x</code> <code>int</code> <p>Left coordinate of the drawing area</p> required <code>start_y</code> <code>int</code> <p>Top coordinate of the drawing area</p> required <code>end_x</code> <code>int</code> <p>Right coordinate of the drawing area</p> required <code>end_y</code> <code>int</code> <p>Bottom coordinate of the drawing area</p> required Source code in <code>src/gui_components.py</code> <pre><code>def render(\n    self,\n    status: AppStatus,\n    canvas: ImageDraw,\n    start_x: int,\n    start_y: int,\n    end_x: int,\n    end_y: int,\n) -&gt; None:\n    \"\"\"Render the ROM randomization screen.\n\n    Draws the randomization screen interface including instructions text and log entries.\n\n    Args:\n        status (AppStatus): Current application status containing randomization state\n        canvas (ImageDraw): The PIL ImageDraw canvas to draw on\n        start_x (int): Left coordinate of the drawing area\n        start_y (int): Top coordinate of the drawing area\n        end_x (int): Right coordinate of the drawing area\n        end_y (int): Bottom coordinate of the drawing area\n    \"\"\"\n    container_start_x = start_x + self.padding\n    container_start_y = start_y + self.padding\n\n    draw_utils.draw_text(\n        canvas=canvas,\n        start_x=container_start_x,\n        start_y=container_start_y,\n        text=f\"Press {Glyphs.GAME_PAD_A} to start randomizing the ROM.\",\n        font_size=self.font_size,\n        color=Colors.PRIMARY,\n    )\n\n    with self._logs_lock:\n        logs = status.randomize_rom_status.logs.split(\"\\n\")\n        logs = [log for log in logs if log.strip() != \"\"]\n        logs = logs[-20:]\n\n    entry_start_y = container_start_y + self.font_size + self.gap\n    for log in logs:\n        if log.startswith(\"[ERROR]\"):\n            color = Colors.ERROR\n        elif log.startswith(\"[SUCCESS]\"):\n            color = Colors.SUCCESS\n        else:\n            color = Colors.PRIMARY\n\n        draw_utils.draw_text(\n            canvas=canvas,\n            start_x=container_start_x,\n            start_y=entry_start_y,\n            text=log,\n            font_size=self.font_size,\n            color=color,\n        )\n\n        entry_start_y += self.font_size + self.gap\n</code></pre>"},{"location":"reference/gui_components/#gui_components.SelectROM","title":"<code>SelectROM</code>","text":"<p>               Bases: <code>BaseContent</code></p> <p>ROM selection screen component.</p> Source code in <code>src/gui_components.py</code> <pre><code>class SelectROM(BaseContent):\n    \"\"\"ROM selection screen component.\"\"\"\n\n    def __init__(self, padding: int = 10, font_size: int = 20, gap: int = 10) -&gt; None:\n        \"\"\"Initialize ROM selection screen.\n\n        Args:\n            padding (int): Padding around elements. Defaults to 10.\n            font_size (int): Font size for file names. Defaults to 20.\n            gap (int): Gap between file entries. Defaults to 10.\n        \"\"\"\n        self.padding = padding\n        self.font_size = font_size\n        self.gap = gap\n\n    @staticmethod\n    def get_buttons_config() -&gt; dict[ControllerButton, ButtonConfig]:\n        \"\"\"Get button configuration for ROM selection screen.\n\n        Returns:\n            dict[ControllerButton, ButtonConfig]: Button configuration mapping.\n        \"\"\"\n        return {\n            ControllerButton.DPAD_UP: ButtonConfig(\n                glyph=Glyphs.GAME_PAD_UP,\n                label=\"Up\",\n            ),\n            ControllerButton.DPAD_DOWN: ButtonConfig(\n                glyph=Glyphs.GAME_PAD_DOWN,\n                label=\"Down\",\n            ),\n            ControllerButton.A: ButtonConfig(\n                glyph=Glyphs.GAME_PAD_A,\n                label=\"Select\",\n            ),\n            ControllerButton.B: ButtonConfig(\n                glyph=Glyphs.GAME_PAD_B,\n                label=\"Back\",\n            ),\n        }\n\n    def handle_navigation(self, input: Input, status: AppStatus) -&gt; None:\n        \"\"\"Handle navigation events for ROM selection screen.\n\n        Process directional pad and button inputs to navigate the ROM selection interface, including\n        moving up/down the file list, selecting files/folders, and going back.\n\n        Args:\n            input (Input): Input handler instance to check button presses\n            status (AppStatus): Current application status for ROM selection state\n        \"\"\"\n        if input.key(ControllerButton.DPAD_UP):\n            status.select_rom_status.current_selection -= 1\n            if status.select_rom_status.current_selection &lt; 0:\n                status.select_rom_status.current_selection = (\n                    len(status.select_rom_status.current_dir.children) - 1\n                )\n\n        elif input.key(ControllerButton.DPAD_DOWN):\n            status.select_rom_status.current_selection += 1\n            if status.select_rom_status.current_selection &gt;= len(\n                status.select_rom_status.current_dir.children\n            ):\n                status.select_rom_status.current_selection = 0\n\n        elif input.key(ControllerButton.A):\n            selected_child = status.select_rom_status.current_dir.children[\n                status.select_rom_status.current_selection\n            ]\n            status.select_rom_status.selections.append(selected_child)\n\n            if selected_child.is_file:\n                status.select_rom_status.selected_rom = selected_child.path\n                status.next_step()\n\n            else:\n                status.select_rom_status.current_dir = (\n                    status.select_rom_status.current_dir.children[\n                        status.select_rom_status.current_selection\n                    ]\n                )\n                status.select_rom_status.current_selection = 0\n\n        elif input.key(ControllerButton.B):\n            if status.select_rom_status.current_dir.path != Path(\"/\"):\n                status.select_rom_status.selections.pop()\n                status.select_rom_status.current_dir = status.select_rom_status.tree\n                for entry in status.select_rom_status.selections:\n                    for children in status.select_rom_status.current_dir.children:\n                        if entry.path == children.path:\n                            status.select_rom_status.current_dir = children\n                            break\n\n                status.select_rom_status.current_selection = 0\n\n    def render(\n        self,\n        status: AppStatus,\n        canvas: ImageDraw,\n        start_x: int,\n        start_y: int,\n        end_x: int,\n        end_y: int,\n    ) -&gt; None:\n        \"\"\"Render the ROM selection screen.\n\n        Draws the list of files and directories in the current directory, highlighting the selected\n        entry.\n\n        Args:\n            status (AppStatus): Current application status.\n            canvas (ImageDraw): The canvas to draw on.\n            start_x (int): Left coordinate.\n            start_y (int): Top coordinate.\n            end_x (int): Right coordinate.\n            end_y (int): Bottom coordinate.\n        \"\"\"\n        window_size = 10\n        window_start_index = status.select_rom_status.current_selection // window_size * window_size\n        window_end_index = window_start_index + window_size\n\n        window = status.select_rom_status.current_dir.children[window_start_index:window_end_index]\n\n        selected_index = status.select_rom_status.current_selection % window_size\n\n        container_start_x = start_x + self.padding\n        container_start_y = start_y + self.padding\n\n        entry_start_y = container_start_y\n\n        for i, children in enumerate(window):\n            draw_utils.draw_text(\n                canvas=canvas,\n                start_x=container_start_x,\n                start_y=entry_start_y,\n                text=children.name,\n                font_size=self.font_size,\n                color=Colors.SUCCESS if i == selected_index else Colors.PRIMARY,\n            )\n\n            entry_start_y += self.font_size + self.gap\n</code></pre>"},{"location":"reference/gui_components/#gui_components.SelectROM.font_size","title":"<code>font_size = font_size</code>  <code>instance-attribute</code>","text":""},{"location":"reference/gui_components/#gui_components.SelectROM.gap","title":"<code>gap = gap</code>  <code>instance-attribute</code>","text":""},{"location":"reference/gui_components/#gui_components.SelectROM.padding","title":"<code>padding = padding</code>  <code>instance-attribute</code>","text":""},{"location":"reference/gui_components/#gui_components.SelectROM.__init__","title":"<code>__init__(padding=10, font_size=20, gap=10)</code>","text":"<p>Initialize ROM selection screen.</p> <p>Parameters:</p> Name Type Description Default <code>padding</code> <code>int</code> <p>Padding around elements. Defaults to 10.</p> <code>10</code> <code>font_size</code> <code>int</code> <p>Font size for file names. Defaults to 20.</p> <code>20</code> <code>gap</code> <code>int</code> <p>Gap between file entries. Defaults to 10.</p> <code>10</code> Source code in <code>src/gui_components.py</code> <pre><code>def __init__(self, padding: int = 10, font_size: int = 20, gap: int = 10) -&gt; None:\n    \"\"\"Initialize ROM selection screen.\n\n    Args:\n        padding (int): Padding around elements. Defaults to 10.\n        font_size (int): Font size for file names. Defaults to 20.\n        gap (int): Gap between file entries. Defaults to 10.\n    \"\"\"\n    self.padding = padding\n    self.font_size = font_size\n    self.gap = gap\n</code></pre>"},{"location":"reference/gui_components/#gui_components.SelectROM.get_buttons_config","title":"<code>get_buttons_config()</code>  <code>staticmethod</code>","text":"<p>Get button configuration for ROM selection screen.</p> <p>Returns:</p> Type Description <code>dict[ControllerButton, ButtonConfig]</code> <p>dict[ControllerButton, ButtonConfig]: Button configuration mapping.</p> Source code in <code>src/gui_components.py</code> <pre><code>@staticmethod\ndef get_buttons_config() -&gt; dict[ControllerButton, ButtonConfig]:\n    \"\"\"Get button configuration for ROM selection screen.\n\n    Returns:\n        dict[ControllerButton, ButtonConfig]: Button configuration mapping.\n    \"\"\"\n    return {\n        ControllerButton.DPAD_UP: ButtonConfig(\n            glyph=Glyphs.GAME_PAD_UP,\n            label=\"Up\",\n        ),\n        ControllerButton.DPAD_DOWN: ButtonConfig(\n            glyph=Glyphs.GAME_PAD_DOWN,\n            label=\"Down\",\n        ),\n        ControllerButton.A: ButtonConfig(\n            glyph=Glyphs.GAME_PAD_A,\n            label=\"Select\",\n        ),\n        ControllerButton.B: ButtonConfig(\n            glyph=Glyphs.GAME_PAD_B,\n            label=\"Back\",\n        ),\n    }\n</code></pre>"},{"location":"reference/gui_components/#gui_components.SelectROM.handle_navigation","title":"<code>handle_navigation(input, status)</code>","text":"<p>Handle navigation events for ROM selection screen.</p> <p>Process directional pad and button inputs to navigate the ROM selection interface, including moving up/down the file list, selecting files/folders, and going back.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>Input</code> <p>Input handler instance to check button presses</p> required <code>status</code> <code>AppStatus</code> <p>Current application status for ROM selection state</p> required Source code in <code>src/gui_components.py</code> <pre><code>def handle_navigation(self, input: Input, status: AppStatus) -&gt; None:\n    \"\"\"Handle navigation events for ROM selection screen.\n\n    Process directional pad and button inputs to navigate the ROM selection interface, including\n    moving up/down the file list, selecting files/folders, and going back.\n\n    Args:\n        input (Input): Input handler instance to check button presses\n        status (AppStatus): Current application status for ROM selection state\n    \"\"\"\n    if input.key(ControllerButton.DPAD_UP):\n        status.select_rom_status.current_selection -= 1\n        if status.select_rom_status.current_selection &lt; 0:\n            status.select_rom_status.current_selection = (\n                len(status.select_rom_status.current_dir.children) - 1\n            )\n\n    elif input.key(ControllerButton.DPAD_DOWN):\n        status.select_rom_status.current_selection += 1\n        if status.select_rom_status.current_selection &gt;= len(\n            status.select_rom_status.current_dir.children\n        ):\n            status.select_rom_status.current_selection = 0\n\n    elif input.key(ControllerButton.A):\n        selected_child = status.select_rom_status.current_dir.children[\n            status.select_rom_status.current_selection\n        ]\n        status.select_rom_status.selections.append(selected_child)\n\n        if selected_child.is_file:\n            status.select_rom_status.selected_rom = selected_child.path\n            status.next_step()\n\n        else:\n            status.select_rom_status.current_dir = (\n                status.select_rom_status.current_dir.children[\n                    status.select_rom_status.current_selection\n                ]\n            )\n            status.select_rom_status.current_selection = 0\n\n    elif input.key(ControllerButton.B):\n        if status.select_rom_status.current_dir.path != Path(\"/\"):\n            status.select_rom_status.selections.pop()\n            status.select_rom_status.current_dir = status.select_rom_status.tree\n            for entry in status.select_rom_status.selections:\n                for children in status.select_rom_status.current_dir.children:\n                    if entry.path == children.path:\n                        status.select_rom_status.current_dir = children\n                        break\n\n            status.select_rom_status.current_selection = 0\n</code></pre>"},{"location":"reference/gui_components/#gui_components.SelectROM.render","title":"<code>render(status, canvas, start_x, start_y, end_x, end_y)</code>","text":"<p>Render the ROM selection screen.</p> <p>Draws the list of files and directories in the current directory, highlighting the selected entry.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>AppStatus</code> <p>Current application status.</p> required <code>canvas</code> <code>ImageDraw</code> <p>The canvas to draw on.</p> required <code>start_x</code> <code>int</code> <p>Left coordinate.</p> required <code>start_y</code> <code>int</code> <p>Top coordinate.</p> required <code>end_x</code> <code>int</code> <p>Right coordinate.</p> required <code>end_y</code> <code>int</code> <p>Bottom coordinate.</p> required Source code in <code>src/gui_components.py</code> <pre><code>def render(\n    self,\n    status: AppStatus,\n    canvas: ImageDraw,\n    start_x: int,\n    start_y: int,\n    end_x: int,\n    end_y: int,\n) -&gt; None:\n    \"\"\"Render the ROM selection screen.\n\n    Draws the list of files and directories in the current directory, highlighting the selected\n    entry.\n\n    Args:\n        status (AppStatus): Current application status.\n        canvas (ImageDraw): The canvas to draw on.\n        start_x (int): Left coordinate.\n        start_y (int): Top coordinate.\n        end_x (int): Right coordinate.\n        end_y (int): Bottom coordinate.\n    \"\"\"\n    window_size = 10\n    window_start_index = status.select_rom_status.current_selection // window_size * window_size\n    window_end_index = window_start_index + window_size\n\n    window = status.select_rom_status.current_dir.children[window_start_index:window_end_index]\n\n    selected_index = status.select_rom_status.current_selection % window_size\n\n    container_start_x = start_x + self.padding\n    container_start_y = start_y + self.padding\n\n    entry_start_y = container_start_y\n\n    for i, children in enumerate(window):\n        draw_utils.draw_text(\n            canvas=canvas,\n            start_x=container_start_x,\n            start_y=entry_start_y,\n            text=children.name,\n            font_size=self.font_size,\n            color=Colors.SUCCESS if i == selected_index else Colors.PRIMARY,\n        )\n\n        entry_start_y += self.font_size + self.gap\n</code></pre>"},{"location":"reference/input/","title":"Input","text":"<p>Input handling system for game controller events.</p> <p>This module provides a robust input handling system built on top of SDL2, specializing in game controller support. It handles button press events, key repeat functionality, and maintains clean state management for input devices.</p>"},{"location":"reference/input/#input.ControllerButton","title":"<code>ControllerButton</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Enumeration of supported controller buttons mapped to SDL2 constants.</p> <p>This enum provides a clean interface for working with controller buttons by mapping human-readable names to SDL2's button constants. This abstraction allows the rest of the application to work with button inputs without directly dealing with SDL2's constants.</p> <p>The enum includes all standard game controller buttons including: - Face buttons (A, B, X, Y) - Shoulder buttons (L1, R1) - Stick buttons (L3, R3) - Menu buttons (SELECT, START, MENU) - D-pad directions (UP, DOWN, LEFT, RIGHT)</p> Source code in <code>src/input.py</code> <pre><code>class ControllerButton(IntEnum):\n    \"\"\"Enumeration of supported controller buttons mapped to SDL2 constants.\n\n    This enum provides a clean interface for working with controller buttons by mapping\n    human-readable names to SDL2's button constants. This abstraction allows the rest of the\n    application to work with button inputs without directly dealing with SDL2's constants.\n\n    The enum includes all standard game controller buttons including:\n    - Face buttons (A, B, X, Y)\n    - Shoulder buttons (L1, R1)\n    - Stick buttons (L3, R3)\n    - Menu buttons (SELECT, START, MENU)\n    - D-pad directions (UP, DOWN, LEFT, RIGHT)\n    \"\"\"\n\n    A = sdl2.SDL_CONTROLLER_BUTTON_A\n    B = sdl2.SDL_CONTROLLER_BUTTON_B\n    X = sdl2.SDL_CONTROLLER_BUTTON_X\n    Y = sdl2.SDL_CONTROLLER_BUTTON_Y\n    L1 = sdl2.SDL_CONTROLLER_BUTTON_LEFTSHOULDER\n    R1 = sdl2.SDL_CONTROLLER_BUTTON_RIGHTSHOULDER\n    L3 = sdl2.SDL_CONTROLLER_BUTTON_LEFTSTICK\n    R3 = sdl2.SDL_CONTROLLER_BUTTON_RIGHTSTICK\n    SELECT = sdl2.SDL_CONTROLLER_BUTTON_BACK\n    START = sdl2.SDL_CONTROLLER_BUTTON_START\n    MENUF = sdl2.SDL_CONTROLLER_BUTTON_GUIDE\n    DPAD_UP = sdl2.SDL_CONTROLLER_BUTTON_DPAD_UP\n    DPAD_DOWN = sdl2.SDL_CONTROLLER_BUTTON_DPAD_DOWN\n    DPAD_LEFT = sdl2.SDL_CONTROLLER_BUTTON_DPAD_LEFT\n    DPAD_RIGHT = sdl2.SDL_CONTROLLER_BUTTON_DPAD_RIGHT\n</code></pre>"},{"location":"reference/input/#input.ControllerButton.A","title":"<code>A = sdl2.SDL_CONTROLLER_BUTTON_A</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/input/#input.ControllerButton.B","title":"<code>B = sdl2.SDL_CONTROLLER_BUTTON_B</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/input/#input.ControllerButton.DPAD_DOWN","title":"<code>DPAD_DOWN = sdl2.SDL_CONTROLLER_BUTTON_DPAD_DOWN</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/input/#input.ControllerButton.DPAD_LEFT","title":"<code>DPAD_LEFT = sdl2.SDL_CONTROLLER_BUTTON_DPAD_LEFT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/input/#input.ControllerButton.DPAD_RIGHT","title":"<code>DPAD_RIGHT = sdl2.SDL_CONTROLLER_BUTTON_DPAD_RIGHT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/input/#input.ControllerButton.DPAD_UP","title":"<code>DPAD_UP = sdl2.SDL_CONTROLLER_BUTTON_DPAD_UP</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/input/#input.ControllerButton.L1","title":"<code>L1 = sdl2.SDL_CONTROLLER_BUTTON_LEFTSHOULDER</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/input/#input.ControllerButton.L3","title":"<code>L3 = sdl2.SDL_CONTROLLER_BUTTON_LEFTSTICK</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/input/#input.ControllerButton.MENUF","title":"<code>MENUF = sdl2.SDL_CONTROLLER_BUTTON_GUIDE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/input/#input.ControllerButton.R1","title":"<code>R1 = sdl2.SDL_CONTROLLER_BUTTON_RIGHTSHOULDER</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/input/#input.ControllerButton.R3","title":"<code>R3 = sdl2.SDL_CONTROLLER_BUTTON_RIGHTSTICK</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/input/#input.ControllerButton.SELECT","title":"<code>SELECT = sdl2.SDL_CONTROLLER_BUTTON_BACK</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/input/#input.ControllerButton.START","title":"<code>START = sdl2.SDL_CONTROLLER_BUTTON_START</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/input/#input.ControllerButton.X","title":"<code>X = sdl2.SDL_CONTROLLER_BUTTON_X</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/input/#input.ControllerButton.Y","title":"<code>Y = sdl2.SDL_CONTROLLER_BUTTON_Y</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/input/#input.Input","title":"<code>Input</code>","text":"<p>               Bases: <code>object</code></p> <p>Input handler for controller events.</p> <p>This class manages all input-related functionality including: - Controller initialization and mapping - Button state tracking - Key repeat handling - Thread-safe state management</p> <p>The class uses SDL2's game controller API and provides thread-safe operations for managing input state across multiple threads.</p> <p>Attributes:</p> Name Type Description <code>controllers</code> <code>list[Any]</code> <p>List of initialized game controllers</p> Source code in <code>src/input.py</code> <pre><code>class Input(object):\n    \"\"\"Input handler for controller events.\n\n    This class manages all input-related functionality including:\n    - Controller initialization and mapping\n    - Button state tracking\n    - Key repeat handling\n    - Thread-safe state management\n\n    The class uses SDL2's game controller API and provides thread-safe operations for managing input\n    state across multiple threads.\n\n    Attributes:\n        controllers (list[Any]): List of initialized game controllers\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"Initialize the input system and load controller mappings.\n\n        Sets up:\n        - Input state tracking with thread safety\n        - Controller mappings from environment or default\n        - Key repeat settings\n        - Game controller initialization\n\n        Raises:\n            RuntimeError: If no game controllers are found\n        \"\"\"\n        self._initialized = True\n        self._input_lock = Lock()\n\n        # Track the state of all keys\n        self._keys_pressed: set[ControllerButton] = set()\n        self._keys_held: set[ControllerButton] = set()\n        self._keys_held_start_time: dict[ControllerButton, float] = {}\n\n        # Key repeat settings\n        self._initial_delay = 0.35\n\n        # Enable controller events\n        self._load_controller_mappings()\n        sdl2.SDL_GameControllerEventState(sdl2.SDL_ENABLE)\n        sdl2.SDL_JoystickEventState(sdl2.SDL_ENABLE)\n\n        # Open controllers\n        self.controllers: list[Any] = []\n\n        num_controllers = sdl2.SDL_NumJoysticks()\n        logger.info(f\"Found {num_controllers} controller(s)\")\n\n        for i in range(num_controllers):\n            if sdl2.SDL_IsGameController(i):\n                controller = sdl2.SDL_GameControllerOpen(i)\n                if controller:\n                    name = sdl2.SDL_GameControllerName(controller).decode(\"utf-8\")\n                    self.controllers.append(controller)\n                    logger.info(f\"Found game controller {i}: {name}\")\n            else:\n                logger.info(f\"Joystick {i} is not a recognized game controller\")\n\n        if not self.controllers:\n            logger.error(\"No game controllers found.\")\n            raise RuntimeError(\"No game controllers found.\")\n\n    def _load_controller_mappings(self) -&gt; None:\n        \"\"\"Load controller mappings from environment variable or fallback file.\n\n        Attempts to load controller mappings in the following order:\n        1. From SDL_GAMECONTROLLERCONFIG environment variable as a mapping string\n        2. From SDL_GAMECONTROLLERCONFIG environment variable as a file path\n        3. Falls back to SDL default mappings if neither is available\n\n        The method handles both direct mapping strings and mapping files, providing detailed\n        feedback about the mapping process.\n        \"\"\"\n        config_path = sdl2.SDL_getenv(b\"SDL_GAMECONTROLLERCONFIG\")\n        if config_path:\n            config_str = config_path.decode(\"utf-8\")\n\n            if \",\" in config_str and not config_str.endswith((\".txt\", \".cfg\")):\n                # Treat as mapping string - encode to bytes\n                mapping_bytes = config_str.encode(\"utf-8\")\n                result = sdl2.SDL_GameControllerAddMapping(mapping_bytes)\n                if result == -1:\n                    logger.warning(\n                        \"Warning: Failed to load mapping from environment: \"\n                        f\"{sdl2.SDL_GetError().decode()}\"\n                    )\n                else:\n                    logger.info(\"Loaded controller mapping from environment\")\n            else:\n                # Treat as file path - encode to bytes for SDL function\n                if os.path.exists(config_str):\n                    file_path_bytes = config_str.encode(\"utf-8\")\n                    result = sdl2.SDL_GameControllerAddMappingsFromFile(file_path_bytes)\n                    if result == -1:\n                        logger.warning(\n                            f\"Warning: Could not load file {config_str}: \"\n                            f\"{sdl2.SDL_GetError().decode()}\"\n                        )\n                    else:\n                        logger.info(f\"Loaded {result} controller mappings from file {config_str}\")\n                else:\n                    logger.warning(f\"Warning: Controller config file {config_str} not found\")\n        else:\n            logger.info(\"No controller mappings loaded - using SDL defaults\")\n\n    def _add_key_pressed(self, key: ControllerButton) -&gt; None:\n        \"\"\"Add a key to the pressed set.\n\n        This method is thread-safe and handles the addition of a key to both the pressed and held\n        sets, also recording the press time for key repeat functionality.\n\n        Args:\n            key (ControllerButton): The button that was pressed.\n        \"\"\"\n        with self._input_lock:\n            self._keys_pressed.add(key)\n            self._keys_held.add(key)\n            self._keys_held_start_time[key] = time.time()\n\n    def _remove_key_held(self, key: ControllerButton) -&gt; None:\n        \"\"\"Remove a key from the held set.\n\n        This method is thread-safe and handles the removal of a key from the held set and cleans up\n        the associated timing information.\n\n        Args:\n            key (ControllerButton): The button that was released.\n        \"\"\"\n        with self._input_lock:\n            self._keys_held.discard(key)\n            self._keys_held_start_time.pop(key, None)\n\n    def check_event(self, event: sdl2.SDL_Event | None = None) -&gt; bool:\n        \"\"\"Check for input events and update key states.\n\n        Process SDL2 controller events, updating internal key state tracking. This method is\n        thread-safe and handles both button press and release events.\n\n        Args:\n            event (sdl2.SDL_Event | None): The SDL event to process. Defaults to None.\n\n        Returns:\n            bool: True if an event was processed, False otherwise.\n        \"\"\"\n        if event:\n            # Controller button press\n            if event.type == sdl2.SDL_CONTROLLERBUTTONDOWN:\n                button = event.cbutton.button\n                # Map button to key name using the _key_mapping dictionary\n                if button in ControllerButton.__members__.values():\n                    key_name = ControllerButton(button)\n                    self._add_key_pressed(key_name)\n                    return True\n\n            # Controller button release\n            elif event.type == sdl2.SDL_CONTROLLERBUTTONUP:\n                button = event.cbutton.button\n\n                # Clear the key if it was pressed\n                if button in ControllerButton.__members__.values():\n                    key_name = ControllerButton(button)\n                    self._remove_key_held(key_name)\n\n        return False\n\n    def key(self, key: ControllerButton) -&gt; bool:\n        \"\"\"Check if a specific key is pressed or being held.\n\n        This method is thread-safe and implements key repeat functionality. A key is considered\n        \"pressed\" if:\n        1. It was just pressed this frame\n        2. It has been held beyond the initial delay threshold\n\n        Args:\n            key (ControllerButton): The button to check\n\n        Returns:\n            bool: True if the button is pressed or held beyond delay\n        \"\"\"\n        with self._input_lock:\n            is_pressed = key in self._keys_pressed\n            self._keys_pressed.discard(key)\n\n            if key in self._keys_held:\n                held_time = time.time() - self._keys_held_start_time[key]\n                if held_time &gt;= self._initial_delay:\n                    is_pressed = True\n\n            return is_pressed\n\n    def clear_pressed(self) -&gt; None:\n        \"\"\"Clear the pressed keys set.\n\n        This thread-safe method resets the state of pressed keys while maintaining held key state.\n        This is typically called at the end of each frame to prepare for the next frame's input\n        processing.\n        \"\"\"\n        with self._input_lock:\n            self._keys_pressed.clear()\n\n    def destroy(self) -&gt; None:\n        \"\"\"Clean up SDL resources.\n\n        This method performs thorough cleanup of all input-related resources:\n        - Closes all open game controllers\n        - Clears internal state\n        - Shuts down the SDL game controller subsystem\n\n        This should be called before the application exits to ensure proper resource cleanup.\n        \"\"\"\n        with self._input_lock:\n            for controller in self.controllers:\n                sdl2.SDL_GameControllerClose(controller)\n\n            self.controllers = []  # Clear the list of controllers\n            self._keys_pressed = set()\n            self._keys_held = set()\n            self._keys_held_start_time = {}\n\n        sdl2.SDL_QuitSubSystem(sdl2.SDL_INIT_GAMECONTROLLER)\n</code></pre>"},{"location":"reference/input/#input.Input.controllers","title":"<code>controllers = []</code>  <code>instance-attribute</code>","text":""},{"location":"reference/input/#input.Input.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the input system and load controller mappings.</p> <p>Sets up: - Input state tracking with thread safety - Controller mappings from environment or default - Key repeat settings - Game controller initialization</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If no game controllers are found</p> Source code in <code>src/input.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the input system and load controller mappings.\n\n    Sets up:\n    - Input state tracking with thread safety\n    - Controller mappings from environment or default\n    - Key repeat settings\n    - Game controller initialization\n\n    Raises:\n        RuntimeError: If no game controllers are found\n    \"\"\"\n    self._initialized = True\n    self._input_lock = Lock()\n\n    # Track the state of all keys\n    self._keys_pressed: set[ControllerButton] = set()\n    self._keys_held: set[ControllerButton] = set()\n    self._keys_held_start_time: dict[ControllerButton, float] = {}\n\n    # Key repeat settings\n    self._initial_delay = 0.35\n\n    # Enable controller events\n    self._load_controller_mappings()\n    sdl2.SDL_GameControllerEventState(sdl2.SDL_ENABLE)\n    sdl2.SDL_JoystickEventState(sdl2.SDL_ENABLE)\n\n    # Open controllers\n    self.controllers: list[Any] = []\n\n    num_controllers = sdl2.SDL_NumJoysticks()\n    logger.info(f\"Found {num_controllers} controller(s)\")\n\n    for i in range(num_controllers):\n        if sdl2.SDL_IsGameController(i):\n            controller = sdl2.SDL_GameControllerOpen(i)\n            if controller:\n                name = sdl2.SDL_GameControllerName(controller).decode(\"utf-8\")\n                self.controllers.append(controller)\n                logger.info(f\"Found game controller {i}: {name}\")\n        else:\n            logger.info(f\"Joystick {i} is not a recognized game controller\")\n\n    if not self.controllers:\n        logger.error(\"No game controllers found.\")\n        raise RuntimeError(\"No game controllers found.\")\n</code></pre>"},{"location":"reference/input/#input.Input.check_event","title":"<code>check_event(event=None)</code>","text":"<p>Check for input events and update key states.</p> <p>Process SDL2 controller events, updating internal key state tracking. This method is thread-safe and handles both button press and release events.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>SDL_Event | None</code> <p>The SDL event to process. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if an event was processed, False otherwise.</p> Source code in <code>src/input.py</code> <pre><code>def check_event(self, event: sdl2.SDL_Event | None = None) -&gt; bool:\n    \"\"\"Check for input events and update key states.\n\n    Process SDL2 controller events, updating internal key state tracking. This method is\n    thread-safe and handles both button press and release events.\n\n    Args:\n        event (sdl2.SDL_Event | None): The SDL event to process. Defaults to None.\n\n    Returns:\n        bool: True if an event was processed, False otherwise.\n    \"\"\"\n    if event:\n        # Controller button press\n        if event.type == sdl2.SDL_CONTROLLERBUTTONDOWN:\n            button = event.cbutton.button\n            # Map button to key name using the _key_mapping dictionary\n            if button in ControllerButton.__members__.values():\n                key_name = ControllerButton(button)\n                self._add_key_pressed(key_name)\n                return True\n\n        # Controller button release\n        elif event.type == sdl2.SDL_CONTROLLERBUTTONUP:\n            button = event.cbutton.button\n\n            # Clear the key if it was pressed\n            if button in ControllerButton.__members__.values():\n                key_name = ControllerButton(button)\n                self._remove_key_held(key_name)\n\n    return False\n</code></pre>"},{"location":"reference/input/#input.Input.clear_pressed","title":"<code>clear_pressed()</code>","text":"<p>Clear the pressed keys set.</p> <p>This thread-safe method resets the state of pressed keys while maintaining held key state. This is typically called at the end of each frame to prepare for the next frame's input processing.</p> Source code in <code>src/input.py</code> <pre><code>def clear_pressed(self) -&gt; None:\n    \"\"\"Clear the pressed keys set.\n\n    This thread-safe method resets the state of pressed keys while maintaining held key state.\n    This is typically called at the end of each frame to prepare for the next frame's input\n    processing.\n    \"\"\"\n    with self._input_lock:\n        self._keys_pressed.clear()\n</code></pre>"},{"location":"reference/input/#input.Input.destroy","title":"<code>destroy()</code>","text":"<p>Clean up SDL resources.</p> <p>This method performs thorough cleanup of all input-related resources: - Closes all open game controllers - Clears internal state - Shuts down the SDL game controller subsystem</p> <p>This should be called before the application exits to ensure proper resource cleanup.</p> Source code in <code>src/input.py</code> <pre><code>def destroy(self) -&gt; None:\n    \"\"\"Clean up SDL resources.\n\n    This method performs thorough cleanup of all input-related resources:\n    - Closes all open game controllers\n    - Clears internal state\n    - Shuts down the SDL game controller subsystem\n\n    This should be called before the application exits to ensure proper resource cleanup.\n    \"\"\"\n    with self._input_lock:\n        for controller in self.controllers:\n            sdl2.SDL_GameControllerClose(controller)\n\n        self.controllers = []  # Clear the list of controllers\n        self._keys_pressed = set()\n        self._keys_held = set()\n        self._keys_held_start_time = {}\n\n    sdl2.SDL_QuitSubSystem(sdl2.SDL_INIT_GAMECONTROLLER)\n</code></pre>"},{"location":"reference/input/#input.Input.key","title":"<code>key(key)</code>","text":"<p>Check if a specific key is pressed or being held.</p> <p>This method is thread-safe and implements key repeat functionality. A key is considered \"pressed\" if: 1. It was just pressed this frame 2. It has been held beyond the initial delay threshold</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>ControllerButton</code> <p>The button to check</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the button is pressed or held beyond delay</p> Source code in <code>src/input.py</code> <pre><code>def key(self, key: ControllerButton) -&gt; bool:\n    \"\"\"Check if a specific key is pressed or being held.\n\n    This method is thread-safe and implements key repeat functionality. A key is considered\n    \"pressed\" if:\n    1. It was just pressed this frame\n    2. It has been held beyond the initial delay threshold\n\n    Args:\n        key (ControllerButton): The button to check\n\n    Returns:\n        bool: True if the button is pressed or held beyond delay\n    \"\"\"\n    with self._input_lock:\n        is_pressed = key in self._keys_pressed\n        self._keys_pressed.discard(key)\n\n        if key in self._keys_held:\n            held_time = time.time() - self._keys_held_start_time[key]\n            if held_time &gt;= self._initial_delay:\n                is_pressed = True\n\n        return is_pressed\n</code></pre>"},{"location":"reference/main/","title":"Main","text":"<p>Main entry point for the Pok\u00e9mon ROM Randomizer application.</p> <p>This module initializes SDL2 with the required subsystems and manages the main application loop. It's responsible for: - SDL2 initialization and cleanup - Application lifecycle management - Error handling and graceful shutdown</p> <p>The module serves as the starting point for the application, creating the main App instance and running the event loop until exit.</p>"},{"location":"reference/main/#main.libs_path","title":"<code>libs_path = Path(__file__).resolve().parent / 'deps'</code>  <code>module-attribute</code>","text":""},{"location":"reference/main/#main.destroy","title":"<code>destroy(app, exit_code)</code>","text":"<p>Destroy the application and clean up resources.</p> <p>Cleans up application resources and exits with the specified code.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>App</code> <p>The application instance to destroy.</p> required <code>exit_code</code> <code>int</code> <p>The exit code to return to the operating system.</p> required Source code in <code>src/main.py</code> <pre><code>def destroy(app: App, exit_code: int) -&gt; None:\n    \"\"\"Destroy the application and clean up resources.\n\n    Cleans up application resources and exits with the specified code.\n\n    Args:\n        app (App): The application instance to destroy.\n        exit_code (int): The exit code to return to the operating system.\n    \"\"\"\n    logger.info(\"Destroying application...\")\n    app.destroy()\n\n    sys.stdout.close()\n    sys.exit(exit_code)\n</code></pre>"},{"location":"reference/main/#main.main","title":"<code>main()</code>","text":"<p>Main function to initialize the application and handle events.</p> <p>Initializes SDL2 with video and joystick support, creates the main app instance, and runs the main event loop until exit.</p> Source code in <code>src/main.py</code> <pre><code>@logger.catch(reraise=True)\ndef main() -&gt; None:\n    \"\"\"Main function to initialize the application and handle events.\n\n    Initializes SDL2 with video and joystick support, creates the main app instance, and runs the\n    main event loop until exit.\n    \"\"\"\n    logs_folder = Path(__file__).resolve().parent / \"logs\"\n    logs_folder.mkdir(parents=True, exist_ok=True)\n\n    log_file_path = logs_folder / \"{time}.log\"\n    logger.add(log_file_path)\n\n    logger.info(\"Starting Pok\u00e9mon ROM Randomizer app...\")\n    if sdl2.SDL_Init(sdl2.SDL_INIT_VIDEO | sdl2.SDL_INIT_GAMECONTROLLER) &lt; 0:\n        logger.error(f\"SDL2 initialization failed: {sdl2.SDL_GetError()}\")\n        sys.exit(1)\n\n    app = App()\n    app.start()\n\n    try:\n        while app.running:\n            app.update()\n            sdl2.SDL_Delay(16)\n\n    except RuntimeError:\n        destroy(app, 1)\n\n    destroy(app, 0)\n</code></pre>"},{"location":"reference/models/","title":"Models","text":"<p>Core data models for the Pok\u00e9mon ROM randomizer application.</p> <p>This module defines the data structures and state management classes that form the backbone of the application. It includes: - UI color definitions and glyph constants - File system tree representation - Application state management - Step/screen workflow definition - Button configuration models</p> <p>The models use Pydantic for data validation and serialization.</p>"},{"location":"reference/models/#models.AppStatus","title":"<code>AppStatus</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Overall application status containing all sub-component states.</p> <p>This is the root state container for the entire application, consolidating all the various status objects that track different aspects of the application state.</p> <p>Attributes:</p> Name Type Description <code>current_step</code> <code>Step</code> <p>Current screen/step in the workflow</p> <code>exit_menu_status</code> <code>ExitMenuStatus</code> <p>Exit dialog state</p> <code>select_rom_status</code> <code>SelectROMStatus</code> <p>ROM selection screen state</p> <code>randomize_rom_status</code> <code>RandomizeROMStatus</code> <p>Randomization process state</p> Source code in <code>src/models.py</code> <pre><code>class AppStatus(BaseModel):\n    \"\"\"Overall application status containing all sub-component states.\n\n    This is the root state container for the entire application, consolidating all the various\n    status objects that track different aspects of the application state.\n\n    Attributes:\n        current_step (Step): Current screen/step in the workflow\n        exit_menu_status (ExitMenuStatus): Exit dialog state\n        select_rom_status (SelectROMStatus): ROM selection screen state\n        randomize_rom_status (RandomizeROMStatus): Randomization process state\n    \"\"\"\n\n    current_step: Step = Step.SELECT_ROM\n    exit_menu_status: ExitMenuStatus = ExitMenuStatus()\n    select_rom_status: SelectROMStatus = SelectROMStatus()\n    randomize_rom_status: RandomizeROMStatus = RandomizeROMStatus()\n\n    def next_step(self) -&gt; None:\n        \"\"\"Move to the next step in the application workflow.\n\n        Updates the current_step to the next logical step in the application flow. Currently handles\n        progression from ROM selection to randomization.\n        \"\"\"\n        if self.current_step == Step.SELECT_ROM:\n            self.current_step = Step.RANDOMIZE_ROM\n\n        elif self.current_step == Step.RANDOMIZE_ROM:\n            self.current_step = Step.RANDOMIZE_ROM\n\n    def previous_step(self) -&gt; None:\n        \"\"\"Move to the previous step in the application workflow and reset state.\n\n        Handles navigation to the previous step, including cleaning up any state from the current\n        step. Currently handles moving back from randomization to ROM selection.\n        \"\"\"\n        if self.current_step == Step.RANDOMIZE_ROM:\n            self.select_rom_status.reload_tree()\n            self.select_rom_status.current_dir = self.select_rom_status.tree\n            self.select_rom_status.selections = []\n            self.select_rom_status.selected_rom = None\n            self.select_rom_status.current_selection = 0\n            self.current_step = Step.SELECT_ROM\n</code></pre>"},{"location":"reference/models/#models.AppStatus.current_step","title":"<code>current_step = Step.SELECT_ROM</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.AppStatus.exit_menu_status","title":"<code>exit_menu_status = ExitMenuStatus()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.AppStatus.randomize_rom_status","title":"<code>randomize_rom_status = RandomizeROMStatus()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.AppStatus.select_rom_status","title":"<code>select_rom_status = SelectROMStatus()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.AppStatus.next_step","title":"<code>next_step()</code>","text":"<p>Move to the next step in the application workflow.</p> <p>Updates the current_step to the next logical step in the application flow. Currently handles progression from ROM selection to randomization.</p> Source code in <code>src/models.py</code> <pre><code>def next_step(self) -&gt; None:\n    \"\"\"Move to the next step in the application workflow.\n\n    Updates the current_step to the next logical step in the application flow. Currently handles\n    progression from ROM selection to randomization.\n    \"\"\"\n    if self.current_step == Step.SELECT_ROM:\n        self.current_step = Step.RANDOMIZE_ROM\n\n    elif self.current_step == Step.RANDOMIZE_ROM:\n        self.current_step = Step.RANDOMIZE_ROM\n</code></pre>"},{"location":"reference/models/#models.AppStatus.previous_step","title":"<code>previous_step()</code>","text":"<p>Move to the previous step in the application workflow and reset state.</p> <p>Handles navigation to the previous step, including cleaning up any state from the current step. Currently handles moving back from randomization to ROM selection.</p> Source code in <code>src/models.py</code> <pre><code>def previous_step(self) -&gt; None:\n    \"\"\"Move to the previous step in the application workflow and reset state.\n\n    Handles navigation to the previous step, including cleaning up any state from the current\n    step. Currently handles moving back from randomization to ROM selection.\n    \"\"\"\n    if self.current_step == Step.RANDOMIZE_ROM:\n        self.select_rom_status.reload_tree()\n        self.select_rom_status.current_dir = self.select_rom_status.tree\n        self.select_rom_status.selections = []\n        self.select_rom_status.selected_rom = None\n        self.select_rom_status.current_selection = 0\n        self.current_step = Step.SELECT_ROM\n</code></pre>"},{"location":"reference/models/#models.ButtonConfig","title":"<code>ButtonConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for a controller button in the UI.</p> <p>Maps a controller button to its visual representation in the UI, pairing a glyph icon with a text label.</p> <p>Attributes:</p> Name Type Description <code>glyph</code> <code>Glyphs</code> <p>The icon to display for this button</p> <code>label</code> <code>str</code> <p>The text label describing the button's action</p> Source code in <code>src/models.py</code> <pre><code>class ButtonConfig(BaseModel):\n    \"\"\"Configuration for a controller button in the UI.\n\n    Maps a controller button to its visual representation in the UI, pairing a glyph icon with a\n    text label.\n\n    Attributes:\n        glyph (Glyphs): The icon to display for this button\n        label (str): The text label describing the button's action\n    \"\"\"\n\n    glyph: Glyphs\n    label: str\n</code></pre>"},{"location":"reference/models/#models.ButtonConfig.glyph","title":"<code>glyph</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.ButtonConfig.label","title":"<code>label</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Colors","title":"<code>Colors</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Colors used throughout the application UI.</p> <p>This enum defines the color palette used across the application, ensuring consistent styling and theming. Colors are defined in hexadecimal format.</p> Source code in <code>src/models.py</code> <pre><code>class Colors(StrEnum):\n    \"\"\"Colors used throughout the application UI.\n\n    This enum defines the color palette used across the application, ensuring consistent styling and\n    theming. Colors are defined in hexadecimal format.\n    \"\"\"\n\n    BACKGROUND = \"#000000\"  # Black background\n    PRIMARY = \"#FFFFFF\"  # White for primary text/elements\n    ERROR = \"#FF0000\"  # Red for error states\n    SUCCESS = \"#19CB00\"  # Green for success states\n    ALERT = \"#B03030\"  # Red variant for alerts/warnings\n</code></pre>"},{"location":"reference/models/#models.Colors.ALERT","title":"<code>ALERT = '#B03030'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Colors.BACKGROUND","title":"<code>BACKGROUND = '#000000'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Colors.ERROR","title":"<code>ERROR = '#FF0000'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Colors.PRIMARY","title":"<code>PRIMARY = '#FFFFFF'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Colors.SUCCESS","title":"<code>SUCCESS = '#19CB00'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.ExitMenuStatus","title":"<code>ExitMenuStatus</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Status of the exit menu dialog.</p> <p>Tracks the state of the exit confirmation dialog, including visibility and user selection.</p> <p>Attributes:</p> Name Type Description <code>exit</code> <code>bool</code> <p>Whether the user has confirmed exit</p> <code>show</code> <code>bool</code> <p>Whether the exit dialog is currently visible</p> <code>selected_item</code> <code>int</code> <p>Index of the currently selected menu item</p> Source code in <code>src/models.py</code> <pre><code>class ExitMenuStatus(BaseModel):\n    \"\"\"Status of the exit menu dialog.\n\n    Tracks the state of the exit confirmation dialog, including visibility and user selection.\n\n    Attributes:\n        exit (bool): Whether the user has confirmed exit\n        show (bool): Whether the exit dialog is currently visible\n        selected_item (int): Index of the currently selected menu item\n    \"\"\"\n\n    exit: bool = False\n    show: bool = False\n    selected_item: int = 1\n</code></pre>"},{"location":"reference/models/#models.ExitMenuStatus.exit","title":"<code>exit = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.ExitMenuStatus.selected_item","title":"<code>selected_item = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.ExitMenuStatus.show","title":"<code>show = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Glyphs","title":"<code>Glyphs</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Unicode glyphs used for icons in the UI.</p> <p>This enum maps semantic names to Unicode characters that serve as icons in the application. The glyphs are sourced from a custom font that provides consistent iconography across different platforms.</p> <p>The glyphs are organized into categories: - Status indicators (heart, exclamation, thunder) - Action indicators (check, close) - File system icons (file, folder, SD card) - Game controller buttons (d-pad, face buttons, menu)</p> Source code in <code>src/models.py</code> <pre><code>class Glyphs(StrEnum):\n    \"\"\"Unicode glyphs used for icons in the UI.\n\n    This enum maps semantic names to Unicode characters that serve as icons in the application. The\n    glyphs are sourced from a custom font that provides consistent iconography across different\n    platforms.\n\n    The glyphs are organized into categories:\n    - Status indicators (heart, exclamation, thunder)\n    - Action indicators (check, close)\n    - File system icons (file, folder, SD card)\n    - Game controller buttons (d-pad, face buttons, menu)\n    \"\"\"\n\n    HEART = \"\\ue000\"\n    EXCLAMATION = \"\\ue002\"\n    THUNDER = \"\\ue001\"\n    THUNDER_FILLED = \"\\ue003\"\n\n    CHECK = \"\\ue005\"\n    CLOSE = \"\\ue006\"\n\n    FILE = \"\\ue007\"\n    FOLDER = \"\\ue008\"\n    SD_CARD = \"\\ue009\"\n\n    GAME_PAD = \"\\ue004\"\n    GAME_PAD_A = \"\\ue00a\"\n    GAME_PAD_B = \"\\ue00b\"\n    GAME_PAD_MENU = \"\\ue00c\"\n    GAME_PAD_X = \"\\ue00d\"\n    GAME_PAD_Y = \"\\ue00e\"\n    GAME_PAD_DOWN = \"\\ue00f\"\n    GAME_PAD_LEFT = \"\\ue010\"\n    GAME_PAD_RIGHT = \"\\ue011\"\n    GAME_PAD_UP = \"\\ue012\"\n</code></pre>"},{"location":"reference/models/#models.Glyphs.CHECK","title":"<code>CHECK = '\\ue005'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Glyphs.CLOSE","title":"<code>CLOSE = '\\ue006'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Glyphs.EXCLAMATION","title":"<code>EXCLAMATION = '\\ue002'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Glyphs.FILE","title":"<code>FILE = '\\ue007'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Glyphs.FOLDER","title":"<code>FOLDER = '\\ue008'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Glyphs.GAME_PAD","title":"<code>GAME_PAD = '\\ue004'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Glyphs.GAME_PAD_A","title":"<code>GAME_PAD_A = '\\ue00a'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Glyphs.GAME_PAD_B","title":"<code>GAME_PAD_B = '\\ue00b'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Glyphs.GAME_PAD_DOWN","title":"<code>GAME_PAD_DOWN = '\\ue00f'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Glyphs.GAME_PAD_LEFT","title":"<code>GAME_PAD_LEFT = '\\ue010'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Glyphs.GAME_PAD_MENU","title":"<code>GAME_PAD_MENU = '\\ue00c'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Glyphs.GAME_PAD_RIGHT","title":"<code>GAME_PAD_RIGHT = '\\ue011'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Glyphs.GAME_PAD_UP","title":"<code>GAME_PAD_UP = '\\ue012'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Glyphs.GAME_PAD_X","title":"<code>GAME_PAD_X = '\\ue00d'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Glyphs.GAME_PAD_Y","title":"<code>GAME_PAD_Y = '\\ue00e'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Glyphs.HEART","title":"<code>HEART = '\\ue000'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Glyphs.SD_CARD","title":"<code>SD_CARD = '\\ue009'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Glyphs.THUNDER","title":"<code>THUNDER = '\\ue001'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Glyphs.THUNDER_FILLED","title":"<code>THUNDER_FILLED = '\\ue003'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.RandomizeROMStatus","title":"<code>RandomizeROMStatus</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Status of the ROM randomization process.</p> <p>Tracks the state and progress of the ROM randomization operation.</p> <p>Attributes:</p> Name Type Description <code>is_running</code> <code>bool</code> <p>Whether randomization is currently in progress</p> <code>is_finished</code> <code>bool</code> <p>Whether randomization has completed</p> <code>logs</code> <code>str</code> <p>Log output from the randomization process</p> Source code in <code>src/models.py</code> <pre><code>class RandomizeROMStatus(BaseModel):\n    \"\"\"Status of the ROM randomization process.\n\n    Tracks the state and progress of the ROM randomization operation.\n\n    Attributes:\n        is_running (bool): Whether randomization is currently in progress\n        is_finished (bool): Whether randomization has completed\n        logs (str): Log output from the randomization process\n    \"\"\"\n\n    is_running: bool = False\n    is_finished: bool = False\n    logs: str = \"\"\n</code></pre>"},{"location":"reference/models/#models.RandomizeROMStatus.is_finished","title":"<code>is_finished = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.RandomizeROMStatus.is_running","title":"<code>is_running = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.RandomizeROMStatus.logs","title":"<code>logs = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.SelectROMStatus","title":"<code>SelectROMStatus</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Status of the ROM selection screen.</p> <p>Manages the state of the ROM selection interface, including the file system tree, current selection, and navigation history.</p> <p>Attributes:</p> Name Type Description <code>tree</code> <code>TreeNode</code> <p>Root of the file system tree</p> <code>selected_rom</code> <code>Path | None</code> <p>Currently selected ROM file</p> <code>selections</code> <code>list[TreeNode]</code> <p>History of selected nodes</p> <code>current_selection</code> <code>int</code> <p>Index of current selection in current directory</p> <code>current_dir</code> <code>TreeNode</code> <p>Currently displayed directory node</p> Source code in <code>src/models.py</code> <pre><code>class SelectROMStatus(BaseModel):\n    \"\"\"Status of the ROM selection screen.\n\n    Manages the state of the ROM selection interface, including the file system tree, current\n    selection, and navigation history.\n\n    Attributes:\n        tree (TreeNode): Root of the file system tree\n        selected_rom (Path | None): Currently selected ROM file\n        selections (list[TreeNode]): History of selected nodes\n        current_selection (int): Index of current selection in current directory\n        current_dir (TreeNode): Currently displayed directory node\n    \"\"\"\n\n    tree: TreeNode\n    selected_rom: Path | None = None\n    selections: list[TreeNode] = Field(default_factory=list)\n    current_selection: int = 0\n    current_dir: TreeNode\n\n    def __init__(self, **data: Any) -&gt; None:\n        \"\"\"Initialize the ROM selection status.\n\n        Creates the initial file system tree and sets up the selection state.\n\n        Args:\n            **data: Additional initialization data\n        \"\"\"\n        tree = TreeNode(\n            name=\"root\",\n            path=Path(\"/\"),\n            children=self._generate_tree(),\n        )\n\n        data[\"tree\"] = tree\n        data[\"current_dir\"] = tree\n\n        super().__init__(**data)\n\n    def _is_empty_child(self, child: TreeNode) -&gt; bool:\n        \"\"\"Check if a tree node is a folder and has no children.\n\n        Args:\n            child (TreeNode): The node to check\n\n        Returns:\n            bool: True if the node is an empty folder, False otherwise\n        \"\"\"\n        if not child.is_file and child.children is not None and len(child.children) == 0:\n            return True\n\n        return False\n\n    def _generate_tree(self, folder: Path | None = None) -&gt; list[TreeNode]:\n        \"\"\"Generate a tree structure from the filesystem.\n\n        Recursively builds a tree of TreeNode objects representing the file system hierarchy,\n        filtering for ROM files.\n\n        Args:\n            folder (Path | None): Starting folder. If None, starts from SD directories. Defaults to\n                None.\n\n        Returns:\n            list[TreeNode]: List of tree nodes for the current level\n        \"\"\"\n        results: list[TreeNode] = []\n\n        if folder is None:\n            sd1_roms_path = Path(\"/mnt\") / \"mmc\" / \"ROMS\"\n            sd2_roms_path = Path(\"/mnt\") / \"sdcard\" / \"ROMS\"\n\n            if sd1_roms_path.exists():\n                child = TreeNode(\n                    name=f\"{Glyphs.SD_CARD} SD1/\",\n                    path=sd1_roms_path,\n                    children=self._generate_tree(sd1_roms_path),\n                )\n\n                if not self._is_empty_child(child):\n                    results.append(child)\n\n            if sd2_roms_path.exists():\n                child = TreeNode(\n                    name=f\"{Glyphs.SD_CARD} SD2/\",\n                    path=sd2_roms_path,\n                    children=self._generate_tree(sd2_roms_path),\n                )\n\n                if not self._is_empty_child(child):\n                    results.append(child)\n\n        else:\n            for entry in folder.iterdir():\n                if entry.is_dir():\n                    child = TreeNode(\n                        name=f\"{Glyphs.FOLDER} {entry.name}/\",\n                        path=entry,\n                        children=self._generate_tree(entry),\n                    )\n\n                    if not self._is_empty_child(child):\n                        results.append(child)\n\n                elif entry.is_file() and entry.suffix.lower() in [\".gba\", \".gbc\", \".gb\"]:\n                    results.append(\n                        TreeNode(\n                            name=f\"{Glyphs.FILE} {entry.name}\",\n                            is_file=True,\n                            path=entry,\n                        )\n                    )\n\n        return results\n\n    def reload_tree(self) -&gt; TreeNode:\n        \"\"\"Reload the entire file system tree structure.\n\n        Rebuilds the file system tree from scratch, useful when the underlying file system may have\n        changed.\n\n        Returns:\n            TreeNode: The root node of the reloaded tree\n        \"\"\"\n        self.tree = TreeNode(\n            name=\"root\",\n            path=Path(\"/\"),\n            children=self._generate_tree(),\n        )\n        return self.tree\n</code></pre>"},{"location":"reference/models/#models.SelectROMStatus.current_dir","title":"<code>current_dir</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.SelectROMStatus.current_selection","title":"<code>current_selection = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.SelectROMStatus.selected_rom","title":"<code>selected_rom = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.SelectROMStatus.selections","title":"<code>selections = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.SelectROMStatus.tree","title":"<code>tree</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.SelectROMStatus.__init__","title":"<code>__init__(**data)</code>","text":"<p>Initialize the ROM selection status.</p> <p>Creates the initial file system tree and sets up the selection state.</p> <p>Parameters:</p> Name Type Description Default <code>**data</code> <code>Any</code> <p>Additional initialization data</p> <code>{}</code> Source code in <code>src/models.py</code> <pre><code>def __init__(self, **data: Any) -&gt; None:\n    \"\"\"Initialize the ROM selection status.\n\n    Creates the initial file system tree and sets up the selection state.\n\n    Args:\n        **data: Additional initialization data\n    \"\"\"\n    tree = TreeNode(\n        name=\"root\",\n        path=Path(\"/\"),\n        children=self._generate_tree(),\n    )\n\n    data[\"tree\"] = tree\n    data[\"current_dir\"] = tree\n\n    super().__init__(**data)\n</code></pre>"},{"location":"reference/models/#models.SelectROMStatus.reload_tree","title":"<code>reload_tree()</code>","text":"<p>Reload the entire file system tree structure.</p> <p>Rebuilds the file system tree from scratch, useful when the underlying file system may have changed.</p> <p>Returns:</p> Name Type Description <code>TreeNode</code> <code>TreeNode</code> <p>The root node of the reloaded tree</p> Source code in <code>src/models.py</code> <pre><code>def reload_tree(self) -&gt; TreeNode:\n    \"\"\"Reload the entire file system tree structure.\n\n    Rebuilds the file system tree from scratch, useful when the underlying file system may have\n    changed.\n\n    Returns:\n        TreeNode: The root node of the reloaded tree\n    \"\"\"\n    self.tree = TreeNode(\n        name=\"root\",\n        path=Path(\"/\"),\n        children=self._generate_tree(),\n    )\n    return self.tree\n</code></pre>"},{"location":"reference/models/#models.Step","title":"<code>Step</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Steps/screens in the application workflow.</p> <p>Defines the possible screens in the application and their order. The integer values represent the sequence of steps in the workflow.</p> Source code in <code>src/models.py</code> <pre><code>class Step(IntEnum):\n    \"\"\"Steps/screens in the application workflow.\n\n    Defines the possible screens in the application and their order. The integer values represent\n    the sequence of steps in the workflow.\n    \"\"\"\n\n    SELECT_ROM = 0\n    RANDOMIZE_ROM = 1\n</code></pre>"},{"location":"reference/models/#models.Step.RANDOMIZE_ROM","title":"<code>RANDOMIZE_ROM = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.Step.SELECT_ROM","title":"<code>SELECT_ROM = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.TreeNode","title":"<code>TreeNode</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a node in the file system tree structure.</p> <p>This model is used to build a hierarchical representation of the file system for ROM selection. Each node can represent either a file or directory.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Display name of the file or directory</p> <code>is_file</code> <code>bool</code> <p>True if this node represents a file, False for directories</p> <code>path</code> <code>Path</code> <p>Absolute path to the file or directory</p> <code>children</code> <code>list[TreeNode]</code> <p>List of child nodes for directories</p> Source code in <code>src/models.py</code> <pre><code>class TreeNode(BaseModel):\n    \"\"\"Represents a node in the file system tree structure.\n\n    This model is used to build a hierarchical representation of the file system for ROM selection.\n    Each node can represent either a file or directory.\n\n    Attributes:\n        name (str): Display name of the file or directory\n        is_file (bool): True if this node represents a file, False for directories\n        path (Path): Absolute path to the file or directory\n        children (list[TreeNode]): List of child nodes for directories\n    \"\"\"\n\n    name: str\n    is_file: bool = False\n    path: Path\n    children: list[\"TreeNode\"] = Field(default_factory=list)\n</code></pre>"},{"location":"reference/models/#models.TreeNode.children","title":"<code>children = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.TreeNode.is_file","title":"<code>is_file = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.TreeNode.name","title":"<code>name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/models/#models.TreeNode.path","title":"<code>path</code>  <code>instance-attribute</code>","text":""},{"location":"reference/view/","title":"View","text":"<p>View management and rendering system for the application UI.</p> <p>This module implements the core view management system, handling: - Main view rendering and composition - Navigation between different screens - Layout management for headers, footers, and content - Input handling and event routing</p> <p>The module uses a component-based architecture where different parts of the UI (header, footer, content) are handled by specialized components.</p>"},{"location":"reference/view/#view.View","title":"<code>View</code>","text":"<p>               Bases: <code>object</code></p> <p>Main view handler for the application UI.</p> <p>This class orchestrates the rendering and interaction of all UI components, including: - Screen layout management - Component composition - Navigation handling - Input routing</p> <p>The view maintains a collection of content components for different application steps and handles transitions between them.</p> <p>Attributes:</p> Name Type Description <code>_header_height</code> <code>int</code> <p>Height of the header section in pixels</p> <code>_footer_height</code> <code>int</code> <p>Height of the footer section in pixels</p> Source code in <code>src/view.py</code> <pre><code>class View(object):\n    \"\"\"Main view handler for the application UI.\n\n    This class orchestrates the rendering and interaction of all UI components, including:\n    - Screen layout management\n    - Component composition\n    - Navigation handling\n    - Input routing\n\n    The view maintains a collection of content components for different application steps and\n    handles transitions between them.\n\n    Attributes:\n        _header_height (int): Height of the header section in pixels\n        _footer_height (int): Height of the footer section in pixels\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"Initialize the view instance.\n\n        Creates instances of all UI components and sets up the content registry mapping steps to\n        their corresponding content components.\n        \"\"\"\n        self._exit_menu = ExitMenu()\n        self._steps: dict[Step, BaseContent] = {\n            Step.SELECT_ROM: SelectROM(),\n            Step.RANDOMIZE_ROM: RandomizeROM(),\n        }\n\n    @property\n    def _header_height(self) -&gt; int:\n        \"\"\"Height of the header section in pixels.\n\n        Returns:\n            int: The fixed height allocated for the header\n        \"\"\"\n        return 50\n\n    @property\n    def _footer_height(self) -&gt; int:\n        \"\"\"Height of the footer section in pixels.\n\n        Returns:\n            int: The fixed height allocated for the footer\n        \"\"\"\n        return 50\n\n    def _render_header(self, canvas: ImageDraw, status: AppStatus) -&gt; None:\n        \"\"\"Render the header component.\n\n        Renders the application header with title and version information in the allocated space.\n\n        Args:\n            canvas (ImageDraw): Canvas to draw on\n            status (AppStatus): Current application status\n        \"\"\"\n        header = Header()\n        header.render(\n            status=status,\n            canvas=canvas,\n            start_x=0,\n            start_y=0,\n            end_x=canvas.im.size[0],\n            end_y=self._header_height,\n        )\n\n    def _render_footer(\n        self,\n        canvas: ImageDraw,\n        status: AppStatus,\n        buttons_config: dict[ControllerButton, ButtonConfig] | None = None,\n    ) -&gt; None:\n        \"\"\"Render the footer component with button controls.\n\n        Renders the footer showing available button controls based on the current context and\n        state.\n\n        Args:\n            canvas (ImageDraw): Canvas to draw on\n            status (AppStatus): Current application status\n            buttons_config (dict[ControllerButton, ButtonConfig] | None): Button configuration.\n                Defaults to None.\n        \"\"\"\n        screen_height = canvas.im.size[1]\n        screen_width = canvas.im.size[0]\n\n        footer = Footer(buttons_config=buttons_config)\n        footer.render(\n            status=status,\n            canvas=canvas,\n            start_x=0,\n            start_y=screen_height - self._footer_height,\n            end_x=screen_width,\n            end_y=screen_height,\n        )\n\n    def _render_content(self, canvas: ImageDraw, status: AppStatus) -&gt; None:\n        \"\"\"Render the main content area.\n\n        Renders the content component corresponding to the current application step in the space\n        between header and footer.\n\n        Args:\n            canvas (ImageDraw): Canvas to draw on\n            status (AppStatus): Current application status\n        \"\"\"\n        content = self._steps[status.current_step]\n        content_start_x = 0\n        content_start_y = self._header_height + 1\n        content_end_x = canvas.im.size[0]\n        content_end_y = canvas.im.size[1] - self._footer_height - 1\n\n        content.render(\n            status=status,\n            canvas=canvas,\n            start_x=content_start_x,\n            start_y=content_start_y,\n            end_x=content_end_x,\n            end_y=content_end_y,\n        )\n\n    def _render_exit_menu(self, canvas: ImageDraw, status: AppStatus) -&gt; None:\n        \"\"\"Render the exit confirmation dialog.\n\n        Renders the exit menu as a modal dialog overlaying the main content when active.\n\n        Args:\n            canvas (ImageDraw): Canvas to draw on\n            status (AppStatus): Current application status\n        \"\"\"\n        screen_height = canvas.im.size[1]\n        screen_width = canvas.im.size[0]\n\n        self._exit_menu.render(\n            status=status,\n            canvas=canvas,\n            start_x=0,\n            start_y=0,\n            end_x=screen_width,\n            end_y=screen_height,\n        )\n\n    def handle_navigation(self, input: Input, status: AppStatus) -&gt; None:\n        \"\"\"Handle navigation input.\n\n        Routes navigation events to either the exit menu or current content view based on\n        application state.\n\n        Args:\n            input (Input): The input handler to check for navigation\n            status (AppStatus): The current application status\n        \"\"\"\n        if input.key(ControllerButton.MENUF):\n            status.exit_menu_status.selected_item = 1\n            status.exit_menu_status.show = not status.exit_menu_status.show\n\n        elif status.exit_menu_status.show:\n            self._exit_menu.handle_navigation(input=input, status=status)\n\n        else:\n            self._steps[status.current_step].handle_navigation(input=input, status=status)\n\n    def render(self, canvas: ImageDraw, status: AppStatus) -&gt; None:\n        \"\"\"Render the complete view.\n\n        Composes and renders all UI components in their proper layout positions. This includes:\n        1. Header at the top\n        2. Footer at the bottom\n        3. Content in the middle\n        4. Exit menu overlay when active\n\n        Args:\n            canvas (ImageDraw): The canvas to draw on\n            status (AppStatus): The current status of the application\n        \"\"\"\n        draw_utils.draw_clear(canvas=canvas)\n\n        buttons_config = self._steps[status.current_step].get_buttons_config()\n        if status.exit_menu_status.show:\n            buttons_config = self._exit_menu.get_buttons_config()\n\n        self._render_header(canvas=canvas, status=status)\n        self._render_footer(canvas=canvas, status=status, buttons_config=buttons_config)\n        self._render_content(canvas=canvas, status=status)\n\n        if status.exit_menu_status.show:\n            self._render_exit_menu(canvas=canvas, status=status)\n</code></pre>"},{"location":"reference/view/#view.View.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the view instance.</p> <p>Creates instances of all UI components and sets up the content registry mapping steps to their corresponding content components.</p> Source code in <code>src/view.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the view instance.\n\n    Creates instances of all UI components and sets up the content registry mapping steps to\n    their corresponding content components.\n    \"\"\"\n    self._exit_menu = ExitMenu()\n    self._steps: dict[Step, BaseContent] = {\n        Step.SELECT_ROM: SelectROM(),\n        Step.RANDOMIZE_ROM: RandomizeROM(),\n    }\n</code></pre>"},{"location":"reference/view/#view.View.handle_navigation","title":"<code>handle_navigation(input, status)</code>","text":"<p>Handle navigation input.</p> <p>Routes navigation events to either the exit menu or current content view based on application state.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>Input</code> <p>The input handler to check for navigation</p> required <code>status</code> <code>AppStatus</code> <p>The current application status</p> required Source code in <code>src/view.py</code> <pre><code>def handle_navigation(self, input: Input, status: AppStatus) -&gt; None:\n    \"\"\"Handle navigation input.\n\n    Routes navigation events to either the exit menu or current content view based on\n    application state.\n\n    Args:\n        input (Input): The input handler to check for navigation\n        status (AppStatus): The current application status\n    \"\"\"\n    if input.key(ControllerButton.MENUF):\n        status.exit_menu_status.selected_item = 1\n        status.exit_menu_status.show = not status.exit_menu_status.show\n\n    elif status.exit_menu_status.show:\n        self._exit_menu.handle_navigation(input=input, status=status)\n\n    else:\n        self._steps[status.current_step].handle_navigation(input=input, status=status)\n</code></pre>"},{"location":"reference/view/#view.View.render","title":"<code>render(canvas, status)</code>","text":"<p>Render the complete view.</p> <p>Composes and renders all UI components in their proper layout positions. This includes: 1. Header at the top 2. Footer at the bottom 3. Content in the middle 4. Exit menu overlay when active</p> <p>Parameters:</p> Name Type Description Default <code>canvas</code> <code>ImageDraw</code> <p>The canvas to draw on</p> required <code>status</code> <code>AppStatus</code> <p>The current status of the application</p> required Source code in <code>src/view.py</code> <pre><code>def render(self, canvas: ImageDraw, status: AppStatus) -&gt; None:\n    \"\"\"Render the complete view.\n\n    Composes and renders all UI components in their proper layout positions. This includes:\n    1. Header at the top\n    2. Footer at the bottom\n    3. Content in the middle\n    4. Exit menu overlay when active\n\n    Args:\n        canvas (ImageDraw): The canvas to draw on\n        status (AppStatus): The current status of the application\n    \"\"\"\n    draw_utils.draw_clear(canvas=canvas)\n\n    buttons_config = self._steps[status.current_step].get_buttons_config()\n    if status.exit_menu_status.show:\n        buttons_config = self._exit_menu.get_buttons_config()\n\n    self._render_header(canvas=canvas, status=status)\n    self._render_footer(canvas=canvas, status=status, buttons_config=buttons_config)\n    self._render_content(canvas=canvas, status=status)\n\n    if status.exit_menu_status.show:\n        self._render_exit_menu(canvas=canvas, status=status)\n</code></pre>"}]}