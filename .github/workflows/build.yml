name: Build app creates a release

on:
  workflow_run:
    workflows: ["Lint code"]
    types:
      - completed
    branches:
      - main
      - develop
    conclusion: success

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version 
        id: version
        run: |
          CURRENT_VERSION=$(grep 'version = ' src/__version__.py | cut -d'"' -f2)
          BRANCH=${GITHUB_REF#refs/heads/}
          
          if [ "$BRANCH" = "develop" ]; then
            # Get latest rc tag for current version
            LATEST_RC=$(git tag -l "${CURRENT_VERSION}rc*" | sort -V | tail -n1 || echo "")
            if [ -z "$LATEST_RC" ]; then
              RC_NUM=0
            else
              RC_NUM=$(echo $LATEST_RC | grep -oE 'rc[0-9]+$' | grep -oE '[0-9]+')
              RC_NUM=$((RC_NUM + 1))
            fi
            NEW_VERSION="${CURRENT_VERSION}rc${RC_NUM}"
          else
            NEW_VERSION="${CURRENT_VERSION}"
          fi
          
          echo "version=$NEW_VERSION" >> $GITHUB_ENV
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Update version in file
          sed -i "s/version = \".*\"/version = \"$NEW_VERSION\"/" src/__version__.py

      - name: Setup just
        uses: extractions/setup-just@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build muxapp
        run: just muxapp

      - name: Create Git tag
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a "v${{ env.version }}" -m "Release v${{ env.version }}"
          git push origin --tags

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.version }}
          name: Release ${{ env.version }}
          files: dist/*.muxapp
          prerelease: ${{ github.ref == 'refs/heads/develop' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
